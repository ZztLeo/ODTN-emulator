package io.swagger.api;

import io.swagger.model.*;
import io.swagger.api.DataApiService;
import io.swagger.api.factories.DataApiServiceFactory;

import io.swagger.annotations.ApiParam;
import io.swagger.jaxrs.*;

import io.swagger.model.TapiCommonAdminStatePac;
import io.swagger.model.TapiCommonBandwidthProfile;
import io.swagger.model.TapiCommonCapacity;
import io.swagger.model.TapiCommonCapacityValue;
import io.swagger.model.TapiCommonContext;
import io.swagger.model.TapiCommonContextServiceInterfacePoint;
import io.swagger.model.TapiCommonNameAndValue;
import io.swagger.model.TapiCommonServiceInterfacePointRef;
import io.swagger.model.TapiCommonTimeInterval;
import io.swagger.model.TapiCommonTimePeriod;
import io.swagger.model.TapiCommonTimeRange;
import io.swagger.model.TapiConnectivityCeplistConnectionEndPoint;
import io.swagger.model.TapiConnectivityConnection;
import io.swagger.model.TapiConnectivityConnectionEndPointRef;
import io.swagger.model.TapiConnectivityConnectionRef;
import io.swagger.model.TapiConnectivityConnectivityContext;
import io.swagger.model.TapiConnectivityConnectivityServiceEndPointRef;
import io.swagger.model.TapiConnectivityConnectivityServiceRef;
import io.swagger.model.TapiConnectivityConnectivitycontextConnectivityService;
import io.swagger.model.TapiConnectivityConnectivityserviceEndPoint;
import io.swagger.model.TapiConnectivityContextTopologycontextTopologyNodeOwnednodeedgepointCepList;
import io.swagger.model.TapiConnectivityRoute;
import io.swagger.model.TapiConnectivityRouteRef;
import io.swagger.model.TapiConnectivitySwitch;
import io.swagger.model.TapiConnectivitySwitchControl;
import io.swagger.model.TapiConnectivitySwitchControlRef;
import io.swagger.model.TapiEthBandwidthReport;
import io.swagger.model.TapiEthControlFrameFilter;
import io.swagger.model.TapiEthEth1DmThresholdData;
import io.swagger.model.TapiEthEth1LmThresholdData;
import io.swagger.model.TapiEthEthConnectionEndPointSpec;
import io.swagger.model.TapiEthEthCtpPac;
import io.swagger.model.TapiEthEthDmThresholdData;
import io.swagger.model.TapiEthEthLinkTraceJob;
import io.swagger.model.TapiEthEthLinkTraceResultData;
import io.swagger.model.TapiEthEthLmThresholdData;
import io.swagger.model.TapiEthEthLoopbackJob;
import io.swagger.model.TapiEthEthLoopbackResultData;
import io.swagger.model.TapiEthEthMegSpec;
import io.swagger.model.TapiEthEthMepCommon;
import io.swagger.model.TapiEthEthMepSink;
import io.swagger.model.TapiEthEthMepSource;
import io.swagger.model.TapiEthEthMepSpec;
import io.swagger.model.TapiEthEthMipSpec;
import io.swagger.model.TapiEthEthOamMsgCommonPac;
import io.swagger.model.TapiEthEthOamOperationCommonPac;
import io.swagger.model.TapiEthEthOnDemand1DmPerformanceData;
import io.swagger.model.TapiEthEthOnDemand1LmPerformanceData;
import io.swagger.model.TapiEthEthOnDemand1wayMeasurementJob;
import io.swagger.model.TapiEthEthOnDemand2wayMeasurementJob;
import io.swagger.model.TapiEthEthOnDemandDmPerformanceData;
import io.swagger.model.TapiEthEthOnDemandLmPerformanceData;
import io.swagger.model.TapiEthEthOnDemandMeasurementJobControlSink;
import io.swagger.model.TapiEthEthOnDemandMeasurementJobControlSource;
import io.swagger.model.TapiEthEthProActive1DmPerformanceData;
import io.swagger.model.TapiEthEthProActive1LmPerformanceData;
import io.swagger.model.TapiEthEthProActive1wayMeasurementJob;
import io.swagger.model.TapiEthEthProActive2wayMeasurementJob;
import io.swagger.model.TapiEthEthProActiveDmPerformanceData;
import io.swagger.model.TapiEthEthProActiveLmPerformanceData;
import io.swagger.model.TapiEthEthProActiveMeasurementJobControlSink;
import io.swagger.model.TapiEthEthProActiveMeasurementJobControlSource;
import io.swagger.model.TapiEthEthTerminationPac;
import io.swagger.model.TapiEthEthTestJob;
import io.swagger.model.TapiEthEthTestResultData;
import io.swagger.model.TapiEthEtyTerminationPac;
import io.swagger.model.TapiEthLinkTraceResult;
import io.swagger.model.TapiEthOnDemandDmPerformanceParameters;
import io.swagger.model.TapiEthOnDemandLmPerformanceParameters;
import io.swagger.model.TapiEthPriorityConfiguration;
import io.swagger.model.TapiEthPriorityMapping;
import io.swagger.model.TapiEthQueueConfiguration;
import io.swagger.model.TapiEthStatisticalDmPerformanceParameters;
import io.swagger.model.TapiEthStatisticalLmPerformanceParameters;
import io.swagger.model.TapiEthTrafficConditioningConfiguration;
import io.swagger.model.TapiEthTrafficConditioningPac;
import io.swagger.model.TapiEthTrafficShapingPac;
import io.swagger.model.TapiNotificationAlarmInfo;
import io.swagger.model.TapiNotificationNameAndValueChange;
import io.swagger.model.TapiNotificationNotification;
import io.swagger.model.TapiNotificationNotificationChannel;
import io.swagger.model.TapiNotificationNotificationContext;
import io.swagger.model.TapiNotificationNotificationSubscriptionService;
import io.swagger.model.TapiNotificationSubscriptionFilter;
import io.swagger.model.TapiNotificationTcaInfo;
import io.swagger.model.TapiOamContextOamContext;
import io.swagger.model.TapiOamMegMep;
import io.swagger.model.TapiOamMegMip;
import io.swagger.model.TapiOamMegRef;
import io.swagger.model.TapiOamMepMipList;
import io.swagger.model.TapiOamMepRef;
import io.swagger.model.TapiOamMipRef;
import io.swagger.model.TapiOamOamProfileRef;
import io.swagger.model.TapiOamOamService;
import io.swagger.model.TapiOamOamServiceEndPoint;
import io.swagger.model.TapiOamOamServiceEndPointRef;
import io.swagger.model.TapiOamOamcontextMeg;
import io.swagger.model.TapiOamOamcontextOamJob;
import io.swagger.model.TapiOamOamcontextOamProfile;
import io.swagger.model.TapiOamOamjobPmCurrentData;
import io.swagger.model.TapiOamOamprofilePmThresholdData;
import io.swagger.model.TapiOamPmBinData;
import io.swagger.model.TapiOamPmcurrentdataPmHistoryData;
import io.swagger.model.TapiPathComputationPath;
import io.swagger.model.TapiPathComputationPathComputationContext;
import io.swagger.model.TapiPathComputationPathComputationService;
import io.swagger.model.TapiPathComputationPathObjectiveFunction;
import io.swagger.model.TapiPathComputationPathOptimizationConstraint;
import io.swagger.model.TapiPathComputationPathRef;
import io.swagger.model.TapiPathComputationPathServiceEndPoint;
import io.swagger.model.TapiPathComputationRoutingConstraint;
import io.swagger.model.TapiPathComputationTopologyConstraint;
import io.swagger.model.TapiPhotonicMediaApplicationIdentifier;
import io.swagger.model.TapiPhotonicMediaCentralFrequency;
import io.swagger.model.TapiPhotonicMediaFecPropertiesPac;
import io.swagger.model.TapiPhotonicMediaFrequencyConstraint;
import io.swagger.model.TapiPhotonicMediaLaserPropertiesPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelAssemblySpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelNodeEdgePointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelPoolCapabilityPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelPropertiesPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelServiceInterfacePointSpec;
import io.swagger.model.TapiPhotonicMediaOtsConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiCapabilityPac;
import io.swagger.model.TapiPhotonicMediaOtsiConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiGserverAdaptationPac;
import io.swagger.model.TapiPhotonicMediaOtsiServiceInterfacePointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiTerminationConfigPac;
import io.swagger.model.TapiPhotonicMediaOtsiTerminationPac;
import io.swagger.model.TapiPhotonicMediaPowerPropertiesPac;
import io.swagger.model.TapiPhotonicMediaSpectrumBand;
import io.swagger.model.TapiPhotonicMediaTotalPowerThresholdPac;
import io.swagger.model.TapiTopologyCostCharacteristic;
import io.swagger.model.TapiTopologyInterRuleGroup;
import io.swagger.model.TapiTopologyLatencyCharacteristic;
import io.swagger.model.TapiTopologyLink;
import io.swagger.model.TapiTopologyLinkRef;
import io.swagger.model.TapiTopologyNetworkTopologyService;
import io.swagger.model.TapiTopologyNodeEdgePointRef;
import io.swagger.model.TapiTopologyNodeOwnedNodeEdgePoint;
import io.swagger.model.TapiTopologyNodeRef;
import io.swagger.model.TapiTopologyNodeRuleGroup;
import io.swagger.model.TapiTopologyNodeRuleGroupRef;
import io.swagger.model.TapiTopologyResilienceType;
import io.swagger.model.TapiTopologyRiskCharacteristic;
import io.swagger.model.TapiTopologyRule;
import io.swagger.model.TapiTopologyTopology;
import io.swagger.model.TapiTopologyTopologyContext;
import io.swagger.model.TapiTopologyTopologyNode;
import io.swagger.model.TapiTopologyTopologyRef;
import io.swagger.model.TapiTopologyValidationMechanism;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkConstraint;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkContext;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkService;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkServiceEndPoint;
import io.swagger.model.TapiVirtualNetworkVirtualNwServiceRef;

import java.util.Map;
import java.util.List;
import io.swagger.api.NotFoundException;

import java.io.InputStream;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;

import javax.servlet.ServletConfig;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.ws.rs.*;
import javax.validation.constraints.*;

@Path("/restconf/data")
@Consumes({ "application/json" })
@Produces({ "application/json" })
@io.swagger.annotations.Api(description = "the data API")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-11-14T14:58:12.974+01:00")
public class DataApi  {
   private final DataApiService delegate;

   public DataApi(@Context ServletConfig servletContext) {
      DataApiService delegate = null;

      if (servletContext != null) {
         String implClass = servletContext.getInitParameter("DataApi.implementation");
         if (implClass != null && !"".equals(implClass.trim())) {
            try {
               delegate = (DataApiService) Class.forName(implClass).newInstance();
            } catch (Exception e) {
               throw new RuntimeException(e);
            }
         } 
      }

      if (delegate == null) {
         delegate = DataApiServiceFactory.getDataApi();
      }

      this.delegate = delegate;
   }

    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(uuid,topologyUuid,nodeUuid,nodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.Connection", response = TapiConnectivityConnection.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.Connection", response = TapiConnectivityConnection.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/lower-connection={connection-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidLowerConnectionconnectionUuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of lower-connection",required=true) @PathParam("connection-uuid") String connectionUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidLowerConnectionconnectionUuidGet(uuid,connectionUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/route={local-id}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidRoutelocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of route",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidRoutelocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(uuid,localId,topologyUuid,nodeUuid,nodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/route={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.Route", response = TapiConnectivityRoute.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.Route", response = TapiConnectivityRoute.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidRoutelocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of route",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidRoutelocalIdGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/route={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidRoutelocalIdNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of route",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidRoutelocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/supported-client-link={topology-uuid},{link-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LinkRef", response = TapiTopologyLinkRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSupportedClientLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of supported-client-link",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of supported-client-link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSupportedClientLinktopologyUuidlinkUuidGet(uuid,topologyUuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.SwitchControl", response = TapiConnectivitySwitchControl.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.SwitchControl", response = TapiConnectivitySwitchControl.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidGet(uuid,switchControlUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidNamevalueNameGet(uuid,switchControlUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/resilience-type/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.ResilienceType", response = TapiTopologyResilienceType.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.ResilienceType", response = TapiTopologyResilienceType.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidResilienceTypeGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidResilienceTypeGet(uuid,switchControlUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/sub-switch-control={connection-uuid},{sub-switch-control-switch-control-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.SwitchControlRef", response = TapiConnectivitySwitchControlRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.SwitchControlRef", response = TapiConnectivitySwitchControlRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSubSwitchControlconnectionUuidsubSwitchControlSwitchControlUuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@ApiParam(value = "Id of sub-switch-control",required=true) @PathParam("connection-uuid") String connectionUuid
,@ApiParam(value = "Id of sub-switch-control",required=true) @PathParam("sub-switch-control-switch-control-uuid") String subSwitchControlSwitchControlUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSubSwitchControlconnectionUuidsubSwitchControlSwitchControlUuidGet(uuid,switchControlUuid,connectionUuid,subSwitchControlSwitchControlUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.Switch", response = TapiConnectivitySwitch.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.Switch", response = TapiConnectivitySwitch.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@ApiParam(value = "Id of switch",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdGet(uuid,switchControlUuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@ApiParam(value = "Id of switch",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdNamevalueNameGet(uuid,switchControlUuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/selected-connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@ApiParam(value = "Id of switch",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(uuid,switchControlUuid,localId,topologyUuid,nodeUuid,nodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/selected-route={connection-uuid},{route-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.RouteRef", response = TapiConnectivityRouteRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.RouteRef", response = TapiConnectivityRouteRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedRouteconnectionUuidrouteLocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of switch-control",required=true) @PathParam("switch-control-uuid") String switchControlUuid
,@ApiParam(value = "Id of switch",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of selected-route",required=true) @PathParam("connection-uuid") String connectionUuid
,@ApiParam(value = "Id of selected-route",required=true) @PathParam("route-local-id") String routeLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedRouteconnectionUuidrouteLocalIdGet(uuid,switchControlUuid,localId,connectionUuid,routeLocalId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.connectivitycontext.ConnectivityService", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServicePost(@ApiParam(value = "tapi.connectivity.connectivitycontext.ConnectivityService to be added to list" ) TapiConnectivityConnectivitycontextConnectivityService tapiConnectivityConnectivitycontextConnectivityServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServicePost(tapiConnectivityConnectivitycontextConnectivityServiceBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/avoid-topology={topology-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidAvoidTopologytopologyUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of avoid-topology",required=true) @PathParam("topology-uuid") String topologyUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidAvoidTopologytopologyUuidGet(uuid,topologyUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/connection={connection-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidConnectionconnectionUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of connection",required=true) @PathParam("connection-uuid") String connectionUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidConnectionconnectionUuidGet(uuid,connectionUuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/coroute-inclusion/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.connectivity.ConnectivityServiceRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/coroute-inclusion/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/coroute-inclusion/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.ConnectivityServiceRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added to list" ) TapiConnectivityConnectivityServiceRef tapiConnectivityConnectivityServiceRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionPost(uuid,tapiConnectivityConnectivityServiceRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/coroute-inclusion/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.connectivity.ConnectivityServiceRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added or updated" ) TapiConnectivityConnectivityServiceRef tapiConnectivityConnectivityServiceRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCorouteInclusionPut(uuid,tapiConnectivityConnectivityServiceRefBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/cost-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCostCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCostCharacteristicPost(uuid,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNameDelete(uuid,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNameGet(uuid,costName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNamePost(uuid,costName,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidCostCharacteristiccostNamePut(uuid,costName,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.connectivity.connectivitycontext.ConnectivityService", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidDelete(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/diversity-exclusion/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.ConnectivityServiceRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added to list" ) TapiConnectivityConnectivityServiceRef tapiConnectivityConnectivityServiceRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionPost(uuid,tapiConnectivityConnectivityServiceRefBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/diversity-exclusion={connectivity-service-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.connectivity.ConnectivityServiceRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathParam("connectivity-service-uuid") String connectivityServiceUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidDelete(uuid,connectivityServiceUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/diversity-exclusion={connectivity-service-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathParam("connectivity-service-uuid") String connectivityServiceUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidGet(uuid,connectivityServiceUuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/diversity-exclusion={connectivity-service-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.ConnectivityServiceRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathParam("connectivity-service-uuid") String connectivityServiceUuid
,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added to list" ) TapiConnectivityConnectivityServiceRef tapiConnectivityConnectivityServiceRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidPost(uuid,connectivityServiceUuid,tapiConnectivityConnectivityServiceRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/diversity-exclusion={connectivity-service-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.connectivity.ConnectivityServiceRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathParam("connectivity-service-uuid") String connectivityServiceUuid
,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added or updated" ) TapiConnectivityConnectivityServiceRef tapiConnectivityConnectivityServiceRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidDiversityExclusionconnectivityServiceUuidPut(uuid,connectivityServiceUuid,tapiConnectivityConnectivityServiceRefBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.connectivityservice.EndPoint", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.connectivity.connectivityservice.EndPoint to be added to list" ) TapiConnectivityConnectivityserviceEndPoint tapiConnectivityConnectivityserviceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointPost(uuid,tapiConnectivityConnectivityserviceEndPointBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfileGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.BandwidthProfile to be added to list" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePost(uuid,localId,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.BandwidthProfile to be added or updated" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityBandwidthProfilePut(uuid,localId,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.Capacity", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.Capacity", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.Capacity to be added to list" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPost(uuid,localId,tapiCommonCapacityBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.Capacity", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.Capacity to be added or updated" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPut(uuid,localId,tapiCommonCapacityBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(uuid,localId,topologyUuid,nodeUuid,nodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.connectivity.connectivityservice.EndPoint", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.connectivityservice.EndPoint", response = TapiConnectivityConnectivityserviceEndPoint.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.connectivityservice.EndPoint", response = TapiConnectivityConnectivityserviceEndPoint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/available-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/available-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/occupied-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/occupied-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/supportable-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/supportable-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added to list" ) TapiPhotonicMediaMediaChannelServiceInterfacePointSpec tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecPost(uuid,localId,tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added or updated" ) TapiPhotonicMediaMediaChannelServiceInterfacePointSpec tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelServiceInterfacePointSpecPut(uuid,localId,tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamePost(uuid,localId,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameDelete(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePost(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePut(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", response = TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", response = TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.ApplicationIdentifier", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.ApplicationIdentifier", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.ApplicationIdentifier to be added to list" ) TapiPhotonicMediaApplicationIdentifier tapiPhotonicMediaApplicationIdentifierBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPost(uuid,localId,tapiPhotonicMediaApplicationIdentifierBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.ApplicationIdentifier", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.ApplicationIdentifier to be added or updated" ) TapiPhotonicMediaApplicationIdentifier tapiPhotonicMediaApplicationIdentifierBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPut(uuid,localId,tapiPhotonicMediaApplicationIdentifierBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.CentralFrequency", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyDelete(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.FrequencyConstraint", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.FrequencyConstraint", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list" ) TapiPhotonicMediaFrequencyConstraint tapiPhotonicMediaFrequencyConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPost(uuid,localId,tapiPhotonicMediaFrequencyConstraintBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.FrequencyConstraint", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated" ) TapiPhotonicMediaFrequencyConstraint tapiPhotonicMediaFrequencyConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPut(uuid,localId,tapiPhotonicMediaFrequencyConstraintBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.CentralFrequency", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.CentralFrequency to be added to list" ) TapiPhotonicMediaCentralFrequency tapiPhotonicMediaCentralFrequencyBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPost(uuid,localId,tapiPhotonicMediaCentralFrequencyBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.CentralFrequency", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.CentralFrequency to be added or updated" ) TapiPhotonicMediaCentralFrequency tapiPhotonicMediaCentralFrequencyBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPut(uuid,localId,tapiPhotonicMediaCentralFrequencyBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.OtsiTerminationConfigPac", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiTerminationConfigPac", response = TapiPhotonicMediaOtsiTerminationConfigPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiTerminationConfigPac", response = TapiPhotonicMediaOtsiTerminationConfigPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.OtsiTerminationConfigPac", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.OtsiTerminationConfigPac to be added to list" ) TapiPhotonicMediaOtsiTerminationConfigPac tapiPhotonicMediaOtsiTerminationConfigPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPost(uuid,localId,tapiPhotonicMediaOtsiTerminationConfigPacBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.OtsiTerminationConfigPac", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.OtsiTerminationConfigPac to be added or updated" ) TapiPhotonicMediaOtsiTerminationConfigPac tapiPhotonicMediaOtsiTerminationConfigPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPut(uuid,localId,tapiPhotonicMediaOtsiTerminationConfigPacBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.SpectrumBand", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumDelete(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.FrequencyConstraint", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.FrequencyConstraint", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list" ) TapiPhotonicMediaFrequencyConstraint tapiPhotonicMediaFrequencyConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPost(uuid,localId,tapiPhotonicMediaFrequencyConstraintBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.FrequencyConstraint", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated" ) TapiPhotonicMediaFrequencyConstraint tapiPhotonicMediaFrequencyConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPut(uuid,localId,tapiPhotonicMediaFrequencyConstraintBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.SpectrumBand", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added to list" ) TapiPhotonicMediaSpectrumBand tapiPhotonicMediaSpectrumBandBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPost(uuid,localId,tapiPhotonicMediaSpectrumBandBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.SpectrumBand", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added or updated" ) TapiPhotonicMediaSpectrumBand tapiPhotonicMediaSpectrumBandBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPut(uuid,localId,tapiPhotonicMediaSpectrumBandBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.PowerPropertiesPac", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.PowerPropertiesPac", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.PowerPropertiesPac to be added to list" ) TapiPhotonicMediaPowerPropertiesPac tapiPhotonicMediaPowerPropertiesPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPost(uuid,localId,tapiPhotonicMediaPowerPropertiesPacBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.PowerPropertiesPac", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.PowerPropertiesPac to be added or updated" ) TapiPhotonicMediaPowerPropertiesPac tapiPhotonicMediaPowerPropertiesPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPut(uuid,localId,tapiPhotonicMediaPowerPropertiesPacBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec to be added to list" ) TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec tapiPhotonicMediaOtsiConnectivityServiceEndPointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPost(uuid,localId,tapiPhotonicMediaOtsiConnectivityServiceEndPointSpecBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec to be added or updated" ) TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec tapiPhotonicMediaOtsiConnectivityServiceEndPointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPut(uuid,localId,tapiPhotonicMediaOtsiConnectivityServiceEndPointSpecBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.connectivityservice.EndPoint", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.connectivity.connectivityservice.EndPoint to be added to list" ) TapiConnectivityConnectivityserviceEndPoint tapiConnectivityConnectivityserviceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPost(uuid,localId,tapiConnectivityConnectivityserviceEndPointBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.connectivity.connectivityservice.EndPoint", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.connectivity.connectivityservice.EndPoint to be added or updated" ) TapiConnectivityConnectivityserviceEndPoint tapiConnectivityConnectivityserviceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPut(uuid,localId,tapiConnectivityConnectivityserviceEndPointBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.ServiceInterfacePointRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.ServiceInterfacePointRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list" ) TapiCommonServiceInterfacePointRef tapiCommonServiceInterfacePointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPost(uuid,localId,tapiCommonServiceInterfacePointRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.ServiceInterfacePointRef", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated" ) TapiCommonServiceInterfacePointRef tapiCommonServiceInterfacePointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPut(uuid,localId,tapiCommonServiceInterfacePointRefBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/exclude-link={topology-uuid},{link-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LinkRef", response = TapiTopologyLinkRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidExcludeLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of exclude-link",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of exclude-link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidExcludeLinktopologyUuidlinkUuidGet(uuid,topologyUuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/exclude-node={topology-uuid},{node-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeRef", response = TapiTopologyNodeRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeRef", response = TapiTopologyNodeRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidExcludeNodetopologyUuidnodeUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of exclude-node",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of exclude-node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidExcludeNodetopologyUuidnodeUuidGet(uuid,topologyUuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/exclude-path={path-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidExcludePathpathUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of exclude-path",required=true) @PathParam("path-uuid") String pathUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidExcludePathpathUuidGet(uuid,pathUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.connectivitycontext.ConnectivityService", response = TapiConnectivityConnectivitycontextConnectivityService.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.connectivitycontext.ConnectivityService", response = TapiConnectivityConnectivitycontextConnectivityService.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/include-link={topology-uuid},{link-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LinkRef", response = TapiTopologyLinkRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidIncludeLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-link",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of include-link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidIncludeLinktopologyUuidlinkUuidGet(uuid,topologyUuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/include-node={topology-uuid},{node-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeRef", response = TapiTopologyNodeRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeRef", response = TapiTopologyNodeRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidIncludeNodetopologyUuidnodeUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-node",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of include-node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidIncludeNodetopologyUuidnodeUuidGet(uuid,topologyUuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/include-path={path-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidIncludePathpathUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-path",required=true) @PathParam("path-uuid") String pathUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidIncludePathpathUuidGet(uuid,pathUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/include-topology={topology-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidIncludeTopologytopologyUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-topology",required=true) @PathParam("topology-uuid") String topologyUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidIncludeTopologytopologyUuidGet(uuid,topologyUuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/latency-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristicPost(uuid,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNameDelete(uuid,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNameGet(uuid,trafficPropertyName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNamePost(uuid,trafficPropertyName,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidLatencyCharacteristictrafficPropertyNamePut(uuid,trafficPropertyName,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.connectivitycontext.ConnectivityService", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.connectivity.connectivitycontext.ConnectivityService to be added to list" ) TapiConnectivityConnectivitycontextConnectivityService tapiConnectivityConnectivitycontextConnectivityServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidPost(uuid,tapiConnectivityConnectivitycontextConnectivityServiceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.connectivity.connectivitycontext.ConnectivityService", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.connectivity.connectivitycontext.ConnectivityService to be added or updated" ) TapiConnectivityConnectivitycontextConnectivityService tapiConnectivityConnectivitycontextConnectivityServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidPut(uuid,tapiConnectivityConnectivitycontextConnectivityServiceBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizeDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizeGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizePost(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedBurstSizePut(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRateDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRateDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRateGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRatePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRatePost(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRatePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileCommittedInformationRatePut(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfileGet(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizeDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizeGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizePost(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakBurstSizePut(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRateDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRateDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRateGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRatePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRatePost(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRatePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePeakInformationRatePut(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.BandwidthProfile to be added to list" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePost(uuid,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.BandwidthProfile to be added or updated" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityBandwidthProfilePut(uuid,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.Capacity", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.Capacity", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.Capacity to be added to list" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityPost(uuid,tapiCommonCapacityBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.Capacity", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.Capacity to be added or updated" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityPut(uuid,tapiCommonCapacityBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizeDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizeGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizePost(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRequestedCapacityTotalSizePut(uuid,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/resilience-type/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.ResilienceType", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidResilienceTypeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidResilienceTypeDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/resilience-type/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.ResilienceType", response = TapiTopologyResilienceType.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.ResilienceType", response = TapiTopologyResilienceType.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidResilienceTypeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidResilienceTypeGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/resilience-type/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.ResilienceType", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidResilienceTypePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.ResilienceType to be added to list" ) TapiTopologyResilienceType tapiTopologyResilienceTypeBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidResilienceTypePost(uuid,tapiTopologyResilienceTypeBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/resilience-type/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.ResilienceType", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidResilienceTypePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.ResilienceType to be added or updated" ) TapiTopologyResilienceType tapiTopologyResilienceTypeBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidResilienceTypePut(uuid,tapiTopologyResilienceTypeBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/risk-diversity-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list" ) TapiTopologyRiskCharacteristic tapiTopologyRiskCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicPost(uuid,tapiTopologyRiskCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNameDelete(uuid,riskCharacteristicName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNameGet(uuid,riskCharacteristicName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list" ) TapiTopologyRiskCharacteristic tapiTopologyRiskCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNamePost(uuid,riskCharacteristicName,tapiTopologyRiskCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added or updated" ) TapiTopologyRiskCharacteristic tapiTopologyRiskCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidRiskDiversityCharacteristicriskCharacteristicNamePut(uuid,riskCharacteristicName,tapiTopologyRiskCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.TimeRange", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidScheduleDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidScheduleDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimeRange", response = TapiCommonTimeRange.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidScheduleGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidScheduleGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.TimeRange", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidSchedulePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.TimeRange to be added to list" ) TapiCommonTimeRange tapiCommonTimeRangeBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidSchedulePost(uuid,tapiCommonTimeRangeBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/connectivity-service={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.TimeRange", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextConnectivityServiceuuidSchedulePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.TimeRange to be added or updated" ) TapiCommonTimeRange tapiCommonTimeRangeBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextConnectivityServiceuuidSchedulePut(uuid,tapiCommonTimeRangeBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.connectivity.ConnectivityContext", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),

        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextDelete(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextDelete(securityContext);
    }
    @GET
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectivityContext", response = TapiConnectivityConnectivityContext.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityContext", response = TapiConnectivityConnectivityContext.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextGet(securityContext);
    }
    @POST
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.ConnectivityContext", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextConnectivityContextPost(@ApiParam(value = "tapi.connectivity.ConnectivityContext to be added to list" ) TapiConnectivityConnectivityContext tapiConnectivityContextConnectivityContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextPost(tapiConnectivityContextConnectivityContextBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/tapi-connectivity:connectivity-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.connectivity.ConnectivityContext", response = Void.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextConnectivityContextPut(@ApiParam(value = "tapi.connectivity.ConnectivityContext to be added or updated" ) TapiConnectivityConnectivityContext tapiConnectivityContextConnectivityContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextConnectivityContextPut(tapiConnectivityContextConnectivityContextBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.Context", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextDelete(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextDelete(securityContext);
    }
    @GET
    @Path("/tapi-common:context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Context", response = TapiCommonContext.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Context", response = TapiCommonContext.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextGet(securityContext);
    }
    @POST
    @Path("/tapi-common:context/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNamePost(@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNamePost(tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNamevalueNameDelete(@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNamevalueNameDelete(valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNamevalueNameGet(valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNamevalueNamePost(@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNamevalueNamePost(valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNamevalueNamePut(@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNamevalueNamePut(valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/notification-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.notification.NotificationContext", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextDelete(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextDelete(securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.NotificationContext", response = TapiNotificationNotificationContext.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.NotificationContext", response = TapiNotificationNotificationContext.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextGet(securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.notification.NotificationSubscriptionService", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionPost(@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added to list" ) TapiNotificationNotificationSubscriptionService tapiNotificationNotificationSubscriptionServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionPost(tapiNotificationNotificationSubscriptionServiceBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.notification.NotificationSubscriptionService", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.NotificationSubscriptionService", response = TapiNotificationNotificationSubscriptionService.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.NotificationSubscriptionService", response = TapiNotificationNotificationSubscriptionService.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.notification.NotificationChannel", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.NotificationChannel", response = TapiNotificationNotificationChannel.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.NotificationChannel", response = TapiNotificationNotificationChannel.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.notification.NotificationChannel", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelPost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.notification.NotificationChannel to be added to list" ) TapiNotificationNotificationChannel tapiNotificationNotificationChannelBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelPost(uuid,tapiNotificationNotificationChannelBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification-channel/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.notification.NotificationChannel", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationChannelPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.notification.NotificationChannel to be added or updated" ) TapiNotificationNotificationChannel tapiNotificationNotificationChannelBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationChannelPut(uuid,tapiNotificationNotificationChannelBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/additional-info={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of notification",required=true) @PathParam("notification-uuid") String notificationUuid
,@ApiParam(value = "Id of additional-info",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet(uuid,notificationUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/alarm-info/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.AlarmInfo", response = TapiNotificationAlarmInfo.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.AlarmInfo", response = TapiNotificationAlarmInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAlarmInfoGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of notification",required=true) @PathParam("notification-uuid") String notificationUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAlarmInfoGet(uuid,notificationUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/changed-attributes={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of notification",required=true) @PathParam("notification-uuid") String notificationUuid
,@ApiParam(value = "Id of changed-attributes",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet(uuid,notificationUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.Notification", response = TapiNotificationNotification.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.Notification", response = TapiNotificationNotification.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of notification",required=true) @PathParam("notification-uuid") String notificationUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet(uuid,notificationUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of notification",required=true) @PathParam("notification-uuid") String notificationUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet(uuid,notificationUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/target-object-name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of notification",required=true) @PathParam("notification-uuid") String notificationUuid
,@ApiParam(value = "Id of target-object-name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet(uuid,notificationUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/tca-info/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.TcaInfo", response = TapiNotificationTcaInfo.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.TcaInfo", response = TapiNotificationTcaInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTcaInfoGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of notification",required=true) @PathParam("notification-uuid") String notificationUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTcaInfoGet(uuid,notificationUuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.notification.NotificationSubscriptionService", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidPost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added to list" ) TapiNotificationNotificationSubscriptionService tapiNotificationNotificationSubscriptionServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidPost(uuid,tapiNotificationNotificationSubscriptionServiceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.notification.NotificationSubscriptionService", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added or updated" ) TapiNotificationNotificationSubscriptionService tapiNotificationNotificationSubscriptionServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidPut(uuid,tapiNotificationNotificationSubscriptionServiceBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.notification.SubscriptionFilter", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.SubscriptionFilter", response = TapiNotificationSubscriptionFilter.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.SubscriptionFilter", response = TapiNotificationSubscriptionFilter.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.notification.SubscriptionFilter", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPost(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added to list" ) TapiNotificationSubscriptionFilter tapiNotificationSubscriptionFilterBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPost(uuid,tapiNotificationSubscriptionFilterBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/notification-context/notif-subscription={uuid}/subscription-filter/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.notification.SubscriptionFilter", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added or updated" ) TapiNotificationSubscriptionFilter tapiNotificationSubscriptionFilterBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPut(uuid,tapiNotificationSubscriptionFilterBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notification={uuid}/additional-info={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotificationuuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of additional-info",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotificationuuidAdditionalInfovalueNameGet(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notification={uuid}/alarm-info/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.AlarmInfo", response = TapiNotificationAlarmInfo.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.AlarmInfo", response = TapiNotificationAlarmInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotificationuuidAlarmInfoGet(@ApiParam(value = "Id of notification",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotificationuuidAlarmInfoGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notification={uuid}/changed-attributes={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotificationuuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of changed-attributes",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotificationuuidChangedAttributesvalueNameGet(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notification={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.Notification", response = TapiNotificationNotification.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.Notification", response = TapiNotificationNotification.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotificationuuidGet(@ApiParam(value = "Id of notification",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotificationuuidGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notification={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotificationuuidNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotificationuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notification={uuid}/target-object-name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotificationuuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of target-object-name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotificationuuidTargetObjectNamevalueNameGet(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/notification-context/notification={uuid}/tca-info/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.notification.TcaInfo", response = TapiNotificationTcaInfo.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.notification.TcaInfo", response = TapiNotificationTcaInfo.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextNotificationuuidTcaInfoGet(@ApiParam(value = "Id of notification",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextNotificationuuidTcaInfoGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/notification-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.notification.NotificationContext", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextNotificationContextPost(@ApiParam(value = "tapi.notification.NotificationContext to be added to list" ) TapiNotificationNotificationContext tapiNotificationNotificationContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextPost(tapiNotificationNotificationContextBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/notification-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.notification.NotificationContext", response = Void.class, tags={ "tapi-notification", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextNotificationContextPut(@ApiParam(value = "tapi.notification.NotificationContext to be added or updated" ) TapiNotificationNotificationContext tapiNotificationNotificationContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextNotificationContextPut(tapiNotificationNotificationContextBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.context.OamContext", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextDelete(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextDelete(securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.context.OamContext", response = TapiOamContextOamContext.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.context.OamContext", response = TapiOamContextOamContext.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextGet(securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/eth-meg-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthMegSpec", response = TapiEthEthMegSpec.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthMegSpec", response = TapiEthEthMegSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidEthMegSpecGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidEthMegSpecGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.oamcontext.Meg", response = TapiOamOamcontextMeg.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.oamcontext.Meg", response = TapiOamOamcontextMeg.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-common/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthMepCommon", response = TapiEthEthMepCommon.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthMepCommon", response = TapiEthEthMepCommon.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepCommonGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepCommonGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-sink/bandwidth-report/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.BandwidthReport", response = TapiEthBandwidthReport.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.BandwidthReport", response = TapiEthBandwidthReport.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkBandwidthReportGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkBandwidthReportGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthMepSink", response = TapiEthEthMepSink.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthMepSink", response = TapiEthEthMepSink.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-source-pac/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthMepSource", response = TapiEthEthMepSource.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthMepSource", response = TapiEthEthMepSource.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSourcePacGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSourcePacGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthMepSpec", response = TapiEthEthMepSpec.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthMepSpec", response = TapiEthEthMepSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMeplocalIdEthMepSpecGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMeplocalIdEthMepSpecGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mep={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.meg.Mep", response = TapiOamMegMep.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.meg.Mep", response = TapiOamMegMep.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMeplocalIdGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMeplocalIdGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mep={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMeplocalIdNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMeplocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mip={local-id}/eth-mip-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthMipSpec", response = TapiEthEthMipSpec.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthMipSpec", response = TapiEthEthMipSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMiplocalIdEthMipSpecGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mip",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMiplocalIdEthMipSpecGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mip={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.meg.Mip", response = TapiOamMegMip.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.meg.Mip", response = TapiOamMegMip.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMiplocalIdGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mip",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMiplocalIdGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/mip={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidMiplocalIdNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of mip",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidMiplocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/meg={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextMeguuidNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextMeguuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.oamcontext.OamJob", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobPost(@ApiParam(value = "tapi.oam.oamcontext.OamJob to be added to list" ) TapiOamOamcontextOamJob tapiOamOamcontextOamJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobPost(tapiOamOamcontextOamJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.oamcontext.OamJob", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidDelete(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthLinkTraceJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobDelete(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-lt-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOamOperationCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-lt-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOamOperationCommonPac", response = TapiEthEthOamOperationCommonPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOamOperationCommonPac", response = TapiEthEthOamOperationCommonPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-lt-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOamOperationCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOamOperationCommonPac to be added to list" ) TapiEthEthOamOperationCommonPac tapiEthEthOamOperationCommonPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgPost(uuid,tapiEthEthOamOperationCommonPacBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-lt-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOamOperationCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOamOperationCommonPac to be added or updated" ) TapiEthEthOamOperationCommonPac tapiEthEthOamOperationCommonPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobEthLtMsgPut(uuid,tapiEthEthOamOperationCommonPacBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthLinkTraceJob", response = TapiEthEthLinkTraceJob.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthLinkTraceJob", response = TapiEthEthLinkTraceJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthLinkTraceJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthLinkTraceJob to be added to list" ) TapiEthEthLinkTraceJob tapiEthEthLinkTraceJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobPost(uuid,tapiEthEthLinkTraceJobBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-link-trace-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthLinkTraceJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLinkTraceJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthLinkTraceJob to be added or updated" ) TapiEthEthLinkTraceJob tapiEthEthLinkTraceJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLinkTraceJobPut(uuid,tapiEthEthLinkTraceJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthLoopbackJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobDelete(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/eth-lb-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOamMsgCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/eth-lb-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOamMsgCommonPac", response = TapiEthEthOamMsgCommonPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOamMsgCommonPac", response = TapiEthEthOamMsgCommonPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/eth-lb-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOamMsgCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOamMsgCommonPac to be added to list" ) TapiEthEthOamMsgCommonPac tapiEthEthOamMsgCommonPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgPost(uuid,tapiEthEthOamMsgCommonPacBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/eth-lb-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOamMsgCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOamMsgCommonPac to be added or updated" ) TapiEthEthOamMsgCommonPac tapiEthEthOamMsgCommonPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobEthLbMsgPut(uuid,tapiEthEthOamMsgCommonPacBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthLoopbackJob", response = TapiEthEthLoopbackJob.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthLoopbackJob", response = TapiEthEthLoopbackJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthLoopbackJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthLoopbackJob to be added to list" ) TapiEthEthLoopbackJob tapiEthEthLoopbackJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobPost(uuid,tapiEthEthLoopbackJobBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-loopback-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthLoopbackJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthLoopbackJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthLoopbackJob to be added or updated" ) TapiEthEthLoopbackJob tapiEthEthLoopbackJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthLoopbackJobPut(uuid,tapiEthEthLoopbackJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOnDemand1wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemand1wayMeasurementJob", response = TapiEthEthOnDemand1wayMeasurementJob.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1wayMeasurementJob", response = TapiEthEthOnDemand1wayMeasurementJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobGet(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOnDemandMeasurementJobControlSink", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemandMeasurementJobControlSink", response = TapiEthEthOnDemandMeasurementJobControlSink.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSink", response = TapiEthEthOnDemandMeasurementJobControlSink.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOnDemandMeasurementJobControlSink", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSink to be added to list" ) TapiEthEthOnDemandMeasurementJobControlSink tapiEthEthOnDemandMeasurementJobControlSinkBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkPost(uuid,tapiEthEthOnDemandMeasurementJobControlSinkBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSink", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSink to be added or updated" ) TapiEthEthOnDemandMeasurementJobControlSink tapiEthEthOnDemandMeasurementJobControlSinkBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySinkPut(uuid,tapiEthEthOnDemandMeasurementJobControlSinkBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOnDemandMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourceDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourceGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOnDemandMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added to list" ) TapiEthEthOnDemandMeasurementJobControlSource tapiEthEthOnDemandMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourcePost(uuid,tapiEthEthOnDemandMeasurementJobControlSourceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/on-demand-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added or updated" ) TapiEthEthOnDemandMeasurementJobControlSource tapiEthEthOnDemandMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobOnDemandControl1waySourcePut(uuid,tapiEthEthOnDemandMeasurementJobControlSourceBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOnDemand1wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemand1wayMeasurementJob to be added to list" ) TapiEthEthOnDemand1wayMeasurementJob tapiEthEthOnDemand1wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobPost(uuid,tapiEthEthOnDemand1wayMeasurementJobBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOnDemand1wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemand1wayMeasurementJob to be added or updated" ) TapiEthEthOnDemand1wayMeasurementJob tapiEthEthOnDemand1wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand1wayMeasurementJobPut(uuid,tapiEthEthOnDemand1wayMeasurementJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOnDemand2wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemand2wayMeasurementJob", response = TapiEthEthOnDemand2wayMeasurementJob.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemand2wayMeasurementJob", response = TapiEthEthOnDemand2wayMeasurementJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobGet(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/on-demand-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOnDemandMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourceDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/on-demand-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourceGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/on-demand-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOnDemandMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added to list" ) TapiEthEthOnDemandMeasurementJobControlSource tapiEthEthOnDemandMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourcePost(uuid,tapiEthEthOnDemandMeasurementJobControlSourceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/on-demand-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added or updated" ) TapiEthEthOnDemandMeasurementJobControlSource tapiEthEthOnDemandMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobOnDemandControl2waySourcePut(uuid,tapiEthEthOnDemandMeasurementJobControlSourceBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOnDemand2wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemand2wayMeasurementJob to be added to list" ) TapiEthEthOnDemand2wayMeasurementJob tapiEthEthOnDemand2wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobPost(uuid,tapiEthEthOnDemand2wayMeasurementJobBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-on-demand-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOnDemand2wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOnDemand2wayMeasurementJob to be added or updated" ) TapiEthEthOnDemand2wayMeasurementJob tapiEthEthOnDemand2wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthOnDemand2wayMeasurementJobPut(uuid,tapiEthEthOnDemand2wayMeasurementJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthProActive1wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActive1wayMeasurementJob", response = TapiEthEthProActive1wayMeasurementJob.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActive1wayMeasurementJob", response = TapiEthEthProActive1wayMeasurementJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthProActive1wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActive1wayMeasurementJob to be added to list" ) TapiEthEthProActive1wayMeasurementJob tapiEthEthProActive1wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobPost(uuid,tapiEthEthProActive1wayMeasurementJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthProActiveMeasurementJobControlSink", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActiveMeasurementJobControlSink", response = TapiEthEthProActiveMeasurementJobControlSink.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSink", response = TapiEthEthProActiveMeasurementJobControlSink.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthProActiveMeasurementJobControlSink", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSink to be added to list" ) TapiEthEthProActiveMeasurementJobControlSink tapiEthEthProActiveMeasurementJobControlSinkBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkPost(uuid,tapiEthEthProActiveMeasurementJobControlSinkBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-sink/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSink", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSink to be added or updated" ) TapiEthEthProActiveMeasurementJobControlSink tapiEthEthProActiveMeasurementJobControlSinkBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySinkPut(uuid,tapiEthEthProActiveMeasurementJobControlSinkBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthProActiveMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourceDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourceGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthProActiveMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added to list" ) TapiEthEthProActiveMeasurementJobControlSource tapiEthEthProActiveMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourcePost(uuid,tapiEthEthProActiveMeasurementJobControlSourceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/pro-active-control-1way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added or updated" ) TapiEthEthProActiveMeasurementJobControlSource tapiEthEthProActiveMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobProActiveControl1waySourcePut(uuid,tapiEthEthProActiveMeasurementJobControlSourceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-1way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthProActive1wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActive1wayMeasurementJob to be added or updated" ) TapiEthEthProActive1wayMeasurementJob tapiEthEthProActive1wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive1wayMeasurementJobPut(uuid,tapiEthEthProActive1wayMeasurementJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthProActive2wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActive2wayMeasurementJob", response = TapiEthEthProActive2wayMeasurementJob.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActive2wayMeasurementJob", response = TapiEthEthProActive2wayMeasurementJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthProActive2wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActive2wayMeasurementJob to be added to list" ) TapiEthEthProActive2wayMeasurementJob tapiEthEthProActive2wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobPost(uuid,tapiEthEthProActive2wayMeasurementJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/pro-active-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthProActiveMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourceDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/pro-active-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourceGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/pro-active-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthProActiveMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added to list" ) TapiEthEthProActiveMeasurementJobControlSource tapiEthEthProActiveMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourcePost(uuid,tapiEthEthProActiveMeasurementJobControlSourceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/pro-active-control-2way-source/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSource", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added or updated" ) TapiEthEthProActiveMeasurementJobControlSource tapiEthEthProActiveMeasurementJobControlSourceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobProActiveControl2waySourcePut(uuid,tapiEthEthProActiveMeasurementJobControlSourceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-pro-active-2way-measurement-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthProActive2wayMeasurementJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthProActive2wayMeasurementJob to be added or updated" ) TapiEthEthProActive2wayMeasurementJob tapiEthEthProActive2wayMeasurementJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthProActive2wayMeasurementJobPut(uuid,tapiEthEthProActive2wayMeasurementJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthTestJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobDelete(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/eth-test-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthOamMsgCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobEthTestMsgDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobEthTestMsgDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/eth-test-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOamMsgCommonPac", response = TapiEthEthOamMsgCommonPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOamMsgCommonPac", response = TapiEthEthOamMsgCommonPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobEthTestMsgGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobEthTestMsgGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/eth-test-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthOamMsgCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobEthTestMsgPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOamMsgCommonPac to be added to list" ) TapiEthEthOamMsgCommonPac tapiEthEthOamMsgCommonPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobEthTestMsgPost(uuid,tapiEthEthOamMsgCommonPacBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/eth-test-msg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthOamMsgCommonPac", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobEthTestMsgPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthOamMsgCommonPac to be added or updated" ) TapiEthEthOamMsgCommonPac tapiEthEthOamMsgCommonPacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobEthTestMsgPut(uuid,tapiEthEthOamMsgCommonPacBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthTestJob", response = TapiEthEthTestJob.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthTestJob", response = TapiEthEthTestJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthTestJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthTestJob to be added to list" ) TapiEthEthTestJob tapiEthEthTestJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobPost(uuid,tapiEthEthTestJobBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/eth-test-job/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthTestJob", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidEthTestJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.eth.EthTestJob to be added or updated" ) TapiEthEthTestJob tapiEthEthTestJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidEthTestJobPut(uuid,tapiEthEthTestJobBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.oamcontext.OamJob", response = TapiOamOamcontextOamJob.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.oamcontext.OamJob", response = TapiOamOamcontextOamJob.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidNamePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidNamevalueNamePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidNamevalueNamePut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.OamProfileRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamProfileDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamProfileDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.OamProfileRef", response = TapiOamOamProfileRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.OamProfileRef", response = TapiOamOamProfileRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamProfileGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamProfileGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamProfileRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamProfilePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamProfileRef to be added to list" ) TapiOamOamProfileRef tapiOamOamProfileRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamProfilePost(uuid,tapiOamOamProfileRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.OamProfileRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamProfilePut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamProfileRef to be added or updated" ) TapiOamOamProfileRef tapiOamOamProfileRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamProfilePut(uuid,tapiOamOamProfileRefBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-service-end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamServiceEndPointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamServiceEndPointPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamServiceEndPointRef to be added to list" ) TapiOamOamServiceEndPointRef tapiOamOamServiceEndPointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamServiceEndPointPost(uuid,tapiOamOamServiceEndPointRefBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-service-end-point={oam-service-uuid},{oam-service-end-point-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.OamServiceEndPointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-uuid") String oamServiceUuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-end-point-local-id") String oamServiceEndPointLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdDelete(uuid,oamServiceUuid,oamServiceEndPointLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-service-end-point={oam-service-uuid},{oam-service-end-point-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.OamServiceEndPointRef", response = TapiOamOamServiceEndPointRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.OamServiceEndPointRef", response = TapiOamOamServiceEndPointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-uuid") String oamServiceUuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-end-point-local-id") String oamServiceEndPointLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdGet(uuid,oamServiceUuid,oamServiceEndPointLocalId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-service-end-point={oam-service-uuid},{oam-service-end-point-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamServiceEndPointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-uuid") String oamServiceUuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-end-point-local-id") String oamServiceEndPointLocalId
,@ApiParam(value = "tapi.oam.OamServiceEndPointRef to be added to list" ) TapiOamOamServiceEndPointRef tapiOamOamServiceEndPointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdPost(uuid,oamServiceUuid,oamServiceEndPointLocalId,tapiOamOamServiceEndPointRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/oam-service-end-point={oam-service-uuid},{oam-service-end-point-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.OamServiceEndPointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-uuid") String oamServiceUuid
,@ApiParam(value = "Id of oam-service-end-point",required=true) @PathParam("oam-service-end-point-local-id") String oamServiceEndPointLocalId
,@ApiParam(value = "tapi.oam.OamServiceEndPointRef to be added or updated" ) TapiOamOamServiceEndPointRef tapiOamOamServiceEndPointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidOamServiceEndPointoamServiceUuidoamServiceEndPointLocalIdPut(uuid,oamServiceUuid,oamServiceEndPointLocalId,tapiOamOamServiceEndPointRefBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/elapsed-time/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimeInterval", response = TapiCommonTimeInterval.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimeInterval", response = TapiCommonTimeInterval.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdElapsedTimeGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdElapsedTimeGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/elapsed-time/period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimePeriod", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdElapsedTimePeriodGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdElapsedTimePeriodGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-link-trace-result-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthLinkTraceResultData", response = TapiEthEthLinkTraceResultData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthLinkTraceResultData", response = TapiEthEthLinkTraceResultData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthLinkTraceResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthLinkTraceResultDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-link-trace-result-data/result-list/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.LinkTraceResult", response = TapiEthLinkTraceResult.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.LinkTraceResult", response = TapiEthLinkTraceResult.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthLinkTraceResultDataResultListGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthLinkTraceResultDataResultListGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-loopback-result-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthLoopbackResultData", response = TapiEthEthLoopbackResultData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthLoopbackResultData", response = TapiEthEthLoopbackResultData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthLoopbackResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthLoopbackResultDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-1-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1DmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-1-dm-performance-data/on-demand-near-end-1-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1DmPerformanceDataOnDemandNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1DmPerformanceDataOnDemandNearEnd1DmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-1-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1LmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-1-lm-performance-data/on-demand-near-end-1-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1LmPerformanceDataOnDemandNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemand1LmPerformanceDataOnDemandNearEnd1LmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandDmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-dm-performance-data/on-demand-far-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandDmPerformanceDataOnDemandFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandDmPerformanceDataOnDemandFarEndDmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-dm-performance-data/on-demand-near-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandDmPerformanceDataOnDemandNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandDmPerformanceDataOnDemandNearEndDmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandLmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-lm-performance-data/on-demand-far-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandLmPerformanceDataOnDemandFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandLmPerformanceDataOnDemandFarEndLmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-on-demand-lm-performance-data/on-demand-near-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandLmPerformanceDataOnDemandNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthOnDemandLmPerformanceDataOnDemandNearEndLmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-1-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1DmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-1-dm-performance-data/pro-active-near-end-1-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1DmPerformanceDataProActiveNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1DmPerformanceDataProActiveNearEnd1DmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-1-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1LmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-1-lm-performance-data/pro-active-near-end-1-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1LmPerformanceDataProActiveNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActive1LmPerformanceDataProActiveNearEnd1LmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-dm-performance-data/pro-active-bi-dir-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataProActiveBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataProActiveBiDirDmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-dm-performance-data/pro-active-far-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataProActiveFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataProActiveFarEndDmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-dm-performance-data/pro-active-near-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataProActiveNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveDmPerformanceDataProActiveNearEndDmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveLmPerformanceDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-lm-performance-data/pro-active-far-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveLmPerformanceDataProActiveFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveLmPerformanceDataProActiveFarEndLmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-pro-active-lm-performance-data/pro-active-near-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveLmPerformanceDataProActiveNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthProActiveLmPerformanceDataProActiveNearEndLmParametersGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/eth-test-result-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthTestResultData", response = TapiEthEthTestResultData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthTestResultData", response = TapiEthEthTestResultData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthTestResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdEthTestResultDataGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.oamjob.PmCurrentData", response = TapiOamOamjobPmCurrentData.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.oamjob.PmCurrentData", response = TapiOamOamjobPmCurrentData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimePeriod", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdGranularityPeriodGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdGranularityPeriodGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-1-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1DmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-1-dm-performance-data/on-demand-near-end-1-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1DmPerformanceDataOnDemandNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1DmPerformanceDataOnDemandNearEnd1DmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-1-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1LmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-1-lm-performance-data/on-demand-near-end-1-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1LmPerformanceDataOnDemandNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemand1LmPerformanceDataOnDemandNearEnd1LmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandDmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-dm-performance-data/on-demand-far-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandDmPerformanceDataOnDemandFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandDmPerformanceDataOnDemandFarEndDmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-dm-performance-data/on-demand-near-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandDmPerformanceParameters", response = TapiEthOnDemandDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandDmPerformanceDataOnDemandNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandDmPerformanceDataOnDemandNearEndDmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandLmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-lm-performance-data/on-demand-far-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandLmPerformanceDataOnDemandFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandLmPerformanceDataOnDemandFarEndLmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-on-demand-lm-performance-data/on-demand-near-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.OnDemandLmPerformanceParameters", response = TapiEthOnDemandLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandLmPerformanceDataOnDemandNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthOnDemandLmPerformanceDataOnDemandNearEndLmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-1-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1DmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-1-dm-performance-data/pro-active-near-end-1-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1DmPerformanceDataProActiveNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1DmPerformanceDataProActiveNearEnd1DmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-1-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1LmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-1-lm-performance-data/pro-active-near-end-1-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1LmPerformanceDataProActiveNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActive1LmPerformanceDataProActiveNearEnd1LmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-dm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-dm-performance-data/pro-active-bi-dir-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataProActiveBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataProActiveBiDirDmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-dm-performance-data/pro-active-far-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataProActiveFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataProActiveFarEndDmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-dm-performance-data/pro-active-near-end-dm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataProActiveNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveDmPerformanceDataProActiveNearEndDmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-lm-performance-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveLmPerformanceDataGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-lm-performance-data/pro-active-far-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveLmPerformanceDataProActiveFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveLmPerformanceDataProActiveFarEndLmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/eth-pro-active-lm-performance-data/pro-active-near-end-lm-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveLmPerformanceDataProActiveNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdEthProActiveLmPerformanceDataProActiveNearEndLmParametersGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.pmcurrentdata.PmHistoryData", response = TapiOamPmcurrentdataPmHistoryData.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.pmcurrentdata.PmHistoryData", response = TapiOamPmcurrentdataPmHistoryData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimePeriod", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdGranularityPeriodGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdGranularityPeriodGet(uuid,localId,pmHistoryDataLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/pm-current-data={local-id}/pm-history-data={pm-history-data-local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-current-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of pm-history-data",required=true) @PathParam("pm-history-data-local-id") String pmHistoryDataLocalId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPmCurrentDatalocalIdPmHistoryDatapmHistoryDataLocalIdNamevalueNameGet(uuid,localId,pmHistoryDataLocalId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.oamcontext.OamJob", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.oamcontext.OamJob to be added to list" ) TapiOamOamcontextOamJob tapiOamOamcontextOamJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPost(uuid,tapiOamOamcontextOamJobBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.oamcontext.OamJob", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidPut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.oamcontext.OamJob to be added or updated" ) TapiOamOamcontextOamJob tapiOamOamcontextOamJobBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidPut(uuid,tapiOamOamcontextOamJobBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.TimeRange", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidScheduleDelete(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidScheduleDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimeRange", response = TapiCommonTimeRange.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidScheduleGet(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidScheduleGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.TimeRange", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamJobuuidSchedulePost(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.TimeRange to be added to list" ) TapiCommonTimeRange tapiCommonTimeRangeBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidSchedulePost(uuid,tapiCommonTimeRangeBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-job={uuid}/schedule/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.TimeRange", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamJobuuidSchedulePut(@ApiParam(value = "Id of oam-job",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.TimeRange to be added or updated" ) TapiCommonTimeRange tapiCommonTimeRangeBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamJobuuidSchedulePut(uuid,tapiCommonTimeRangeBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.oamcontext.OamProfile", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfilePost(@ApiParam(value = "tapi.oam.oamcontext.OamProfile to be added to list" ) TapiOamOamcontextOamProfile tapiOamOamcontextOamProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfilePost(tapiOamOamcontextOamProfileBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.oamcontext.OamProfile", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.oamcontext.OamProfile", response = TapiOamOamcontextOamProfile.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.oamcontext.OamProfile", response = TapiOamOamcontextOamProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidNamevalueNameGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidNamevalueNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidNamevalueNamePut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.PmBinData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.PmBinData to be added to list" ) TapiOamPmBinData tapiOamPmBinDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDataPost(uuid,tapiOamPmBinDataBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.PmBinData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.PmBinData", response = TapiOamPmBinData.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.PmBinData", response = TapiOamPmBinData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.TimePeriod", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimePeriod", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.TimePeriod", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.TimePeriod to be added to list" ) TapiCommonTimePeriod tapiCommonTimePeriodBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodPost(uuid,localId,tapiCommonTimePeriodBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.TimePeriod", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.TimePeriod to be added or updated" ) TapiCommonTimePeriod tapiCommonTimePeriodBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdGranularityPeriodPut(uuid,localId,tapiCommonTimePeriodBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdNamePost(uuid,localId,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNameDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNameDelete(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNamePost(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNamePut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdNamevalueNamePut(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.PmBinData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.oam.PmBinData to be added to list" ) TapiOamPmBinData tapiOamPmBinDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdPost(uuid,localId,tapiOamPmBinDataBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-bin-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.PmBinData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmBinDatalocalIdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-bin-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.oam.PmBinData to be added or updated" ) TapiOamPmBinData tapiOamPmBinDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmBinDatalocalIdPut(uuid,localId,tapiOamPmBinDataBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.oamprofile.PmThresholdData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.oamprofile.PmThresholdData to be added to list" ) TapiOamOamprofilePmThresholdData tapiOamOamprofilePmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDataPost(uuid,tapiOamOamprofilePmThresholdDataBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.oamprofile.PmThresholdData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdDelete(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.Eth1DmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.Eth1DmThresholdData", response = TapiEthEth1DmThresholdData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.Eth1DmThresholdData", response = TapiEthEth1DmThresholdData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmClearThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/near-end-1-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataNearEnd1DmCrossThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.Eth1DmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.Eth1DmThresholdData to be added to list" ) TapiEthEth1DmThresholdData tapiEthEth1DmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataPost(uuid,localId,tapiEthEth1DmThresholdDataBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.Eth1DmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.Eth1DmThresholdData to be added or updated" ) TapiEthEth1DmThresholdData tapiEthEth1DmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1DmThresholdDataPut(uuid,localId,tapiEthEth1DmThresholdDataBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.Eth1LmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.Eth1LmThresholdData", response = TapiEthEth1LmThresholdData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.Eth1LmThresholdData", response = TapiEthEth1LmThresholdData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added to list" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdPost(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added or updated" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmClearThresholdPut(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added to list" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdPost(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/near-end-1-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added or updated" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataNearEnd1LmCrossThresholdPut(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.Eth1LmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.Eth1LmThresholdData to be added to list" ) TapiEthEth1LmThresholdData tapiEthEth1LmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataPost(uuid,localId,tapiEthEth1LmThresholdDataBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-1-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.Eth1LmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.Eth1LmThresholdData to be added or updated" ) TapiEthEth1LmThresholdData tapiEthEth1LmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEth1LmThresholdDataPut(uuid,localId,tapiEthEth1LmThresholdDataBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmClearThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/bi-dir-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataBiDirDmCrossThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthDmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataDelete(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmClearThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/far-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataFarEndDmCrossThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthDmThresholdData", response = TapiEthEthDmThresholdData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthDmThresholdData", response = TapiEthEthDmThresholdData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmClearThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added to list" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdPost(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/near-end-dm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalDmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalDmPerformanceParameters to be added or updated" ) TapiEthStatisticalDmPerformanceParameters tapiEthStatisticalDmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataNearEndDmCrossThresholdPut(uuid,localId,tapiEthStatisticalDmPerformanceParametersBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthDmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.EthDmThresholdData to be added to list" ) TapiEthEthDmThresholdData tapiEthEthDmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataPost(uuid,localId,tapiEthEthDmThresholdDataBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-dm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthDmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.EthDmThresholdData to be added or updated" ) TapiEthEthDmThresholdData tapiEthEthDmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthDmThresholdDataPut(uuid,localId,tapiEthEthDmThresholdDataBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.EthLmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataDelete(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added to list" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdPost(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added or updated" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmClearThresholdPut(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added to list" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdPost(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/far-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added or updated" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataFarEndLmCrossThresholdPut(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthLmThresholdData", response = TapiEthEthLmThresholdData.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthLmThresholdData", response = TapiEthEthLmThresholdData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added to list" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdPost(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-clear-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added or updated" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmClearThresholdPut(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added to list" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdPost(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/near-end-lm-cross-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.StatisticalLmPerformanceParameters", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.StatisticalLmPerformanceParameters to be added or updated" ) TapiEthStatisticalLmPerformanceParameters tapiEthStatisticalLmPerformanceParametersBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataNearEndLmCrossThresholdPut(uuid,localId,tapiEthStatisticalLmPerformanceParametersBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.eth.EthLmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.EthLmThresholdData to be added to list" ) TapiEthEthLmThresholdData tapiEthEthLmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataPost(uuid,localId,tapiEthEthLmThresholdDataBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/eth-lm-threshold-data/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.eth.EthLmThresholdData", response = Void.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.eth.EthLmThresholdData to be added or updated" ) TapiEthEthLmThresholdData tapiEthEthLmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdEthLmThresholdDataPut(uuid,localId,tapiEthEthLmThresholdDataBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.oamprofile.PmThresholdData", response = TapiOamOamprofilePmThresholdData.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.oamprofile.PmThresholdData", response = TapiOamOamprofilePmThresholdData.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.TimePeriod", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.TimePeriod", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.TimePeriod", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.TimePeriod to be added to list" ) TapiCommonTimePeriod tapiCommonTimePeriodBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPost(uuid,localId,tapiCommonTimePeriodBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.TimePeriod", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.TimePeriod to be added or updated" ) TapiCommonTimePeriod tapiCommonTimePeriodBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPut(uuid,localId,tapiCommonTimePeriodBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamePost(uuid,localId,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameDelete(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePost(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePut(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.oamprofile.PmThresholdData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.oam.oamprofile.PmThresholdData to be added to list" ) TapiOamOamprofilePmThresholdData tapiOamOamprofilePmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPost(uuid,localId,tapiOamOamprofilePmThresholdDataBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.oamprofile.PmThresholdData", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.oam.oamprofile.PmThresholdData to be added or updated" ) TapiOamOamprofilePmThresholdData tapiOamOamprofilePmThresholdDataBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPut(uuid,localId,tapiOamOamprofilePmThresholdDataBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.oamcontext.OamProfile", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPost(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.oamcontext.OamProfile to be added to list" ) TapiOamOamcontextOamProfile tapiOamOamcontextOamProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPost(uuid,tapiOamOamcontextOamProfileBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-profile={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.oamcontext.OamProfile", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamProfileuuidPut(@ApiParam(value = "Id of oam-profile",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.oamcontext.OamProfile to be added or updated" ) TapiOamOamcontextOamProfile tapiOamOamcontextOamProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamProfileuuidPut(uuid,tapiOamOamcontextOamProfileBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamService", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServicePost(@ApiParam(value = "tapi.oam.OamService to be added to list" ) TapiOamOamService tapiOamOamServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServicePost(tapiOamOamServiceBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.OamService", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidDelete(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidDelete(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamServiceEndPoint", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointPost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamServiceEndPoint to be added to list" ) TapiOamOamServiceEndPoint tapiOamOamServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointPost(uuid,tapiOamOamServiceEndPointBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/connectivity-service-end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.connectivity.ConnectivityServiceEndPointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/connectivity-service-end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/connectivity-service-end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.connectivity.ConnectivityServiceEndPointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointPost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list" ) TapiConnectivityConnectivityServiceEndPointRef tapiConnectivityConnectivityServiceEndPointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointPost(uuid,localId,tapiConnectivityConnectivityServiceEndPointRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/connectivity-service-end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointPut(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated" ) TapiConnectivityConnectivityServiceEndPointRef tapiConnectivityConnectivityServiceEndPointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdConnectivityServiceEndPointPut(uuid,localId,tapiConnectivityConnectivityServiceEndPointRefBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.OamServiceEndPoint", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.OamServiceEndPoint", response = TapiOamOamServiceEndPoint.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.OamServiceEndPoint", response = TapiOamOamServiceEndPoint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/mep/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.MepRef", response = TapiOamMepRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.MepRef", response = TapiOamMepRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdMepGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdMepGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/mip/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.MipRef", response = TapiOamMipRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.MipRef", response = TapiOamMipRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdMipGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdMipGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdNamePost(uuid,localId,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNameDelete(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNamePost(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdNamevalueNamePut(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamServiceEndPoint", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdPost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.oam.OamServiceEndPoint to be added to list" ) TapiOamOamServiceEndPoint tapiOamOamServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdPost(uuid,localId,tapiOamOamServiceEndPointBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.OamServiceEndPoint", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.oam.OamServiceEndPoint to be added or updated" ) TapiOamOamServiceEndPoint tapiOamOamServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdPut(uuid,localId,tapiOamOamServiceEndPointBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.ServiceInterfacePointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.ServiceInterfacePointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list" ) TapiCommonServiceInterfacePointRef tapiCommonServiceInterfacePointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointPost(uuid,localId,tapiCommonServiceInterfacePointRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.ServiceInterfacePointRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated" ) TapiCommonServiceInterfacePointRef tapiCommonServiceInterfacePointRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidEndPointlocalIdServiceInterfacePointPut(uuid,localId,tapiCommonServiceInterfacePointRefBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.OamService", response = TapiOamOamService.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.OamService", response = TapiOamOamService.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/meg/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.MegRef", response = TapiOamMegRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.MegRef", response = TapiOamMegRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidMegGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidMegGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidNamevalueNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidNamevalueNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidNamevalueNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.oam.OamProfileRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidOamProfileDelete(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidOamProfileDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.OamProfileRef", response = TapiOamOamProfileRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.OamProfileRef", response = TapiOamOamProfileRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidOamProfileGet(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidOamProfileGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamProfileRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidOamProfilePost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamProfileRef to be added to list" ) TapiOamOamProfileRef tapiOamOamProfileRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidOamProfilePost(uuid,tapiOamOamProfileRefBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/oam-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.OamProfileRef", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidOamProfilePut(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamProfileRef to be added or updated" ) TapiOamOamProfileRef tapiOamOamProfileRefBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidOamProfilePut(uuid,tapiOamOamProfileRefBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.OamService", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidPost(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamService to be added to list" ) TapiOamOamService tapiOamOamServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidPost(uuid,tapiOamOamServiceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/oam-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.OamService", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextOamServiceuuidPut(@ApiParam(value = "Id of oam-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.oam.OamService to be added or updated" ) TapiOamOamService tapiOamOamServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextOamServiceuuidPut(uuid,tapiOamOamServiceBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/oam-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.oam.context.OamContext", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextOamContextPost(@ApiParam(value = "tapi.oam.context.OamContext to be added to list" ) TapiOamContextOamContext tapiOamContextOamContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextPost(tapiOamContextOamContextBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/oam-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.oam.context.OamContext", response = Void.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextOamContextPut(@ApiParam(value = "tapi.oam.context.OamContext to be added or updated" ) TapiOamContextOamContext tapiOamContextOamContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextOamContextPut(tapiOamContextOamContextBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.path.computation.PathComputationContext", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextDelete(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextDelete(securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathComputationContext", response = TapiPathComputationPathComputationContext.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathComputationContext", response = TapiPathComputationPathComputationContext.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextGet(securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.PathComputationService", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServicePost(@ApiParam(value = "tapi.path.computation.PathComputationService to be added to list" ) TapiPathComputationPathComputationService tapiPathComputationPathComputationServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServicePost(tapiPathComputationPathComputationServiceBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.path.computation.PathComputationService", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidDelete(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.PathServiceEndPoint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added to list" ) TapiPathComputationPathServiceEndPoint tapiPathComputationPathServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointPost(uuid,tapiPathComputationPathServiceEndPointBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedBurstSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRateGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileCommittedInformationRatePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfileGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakBurstSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRateGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePeakInformationRatePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.BandwidthProfile to be added to list" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePost(uuid,localId,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.BandwidthProfile to be added or updated" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityBandwidthProfilePut(uuid,localId,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.Capacity", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.Capacity", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.Capacity to be added to list" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost(uuid,localId,tapiCommonCapacityBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.Capacity", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.Capacity to be added or updated" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut(uuid,localId,tapiCommonCapacityBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.path.computation.PathServiceEndPoint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathServiceEndPoint", response = TapiPathComputationPathServiceEndPoint.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathServiceEndPoint", response = TapiPathComputationPathServiceEndPoint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamePost(uuid,localId,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePost(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.PathServiceEndPoint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added to list" ) TapiPathComputationPathServiceEndPoint tapiPathComputationPathServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPost(uuid,localId,tapiPathComputationPathServiceEndPointBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.path.computation.PathServiceEndPoint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added or updated" ) TapiPathComputationPathServiceEndPoint tapiPathComputationPathServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPut(uuid,localId,tapiPathComputationPathServiceEndPointBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathComputationService", response = TapiPathComputationPathComputationService.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathComputationService", response = TapiPathComputationPathComputationService.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidNamevalueNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.path.computation.PathObjectiveFunction", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathObjectiveFunction", response = TapiPathComputationPathObjectiveFunction.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathObjectiveFunction", response = TapiPathComputationPathObjectiveFunction.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.PathObjectiveFunction", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added to list" ) TapiPathComputationPathObjectiveFunction tapiPathComputationPathObjectiveFunctionBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPost(uuid,tapiPathComputationPathObjectiveFunctionBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/objective-function/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.path.computation.PathObjectiveFunction", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added or updated" ) TapiPathComputationPathObjectiveFunction tapiPathComputationPathObjectiveFunctionBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPut(uuid,tapiPathComputationPathObjectiveFunctionBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.path.computation.PathOptimizationConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathOptimizationConstraint", response = TapiPathComputationPathOptimizationConstraint.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathOptimizationConstraint", response = TapiPathComputationPathOptimizationConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.PathOptimizationConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added to list" ) TapiPathComputationPathOptimizationConstraint tapiPathComputationPathOptimizationConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPost(uuid,tapiPathComputationPathOptimizationConstraintBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/optimization-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.path.computation.PathOptimizationConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added or updated" ) TapiPathComputationPathOptimizationConstraint tapiPathComputationPathOptimizationConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPut(uuid,tapiPathComputationPathOptimizationConstraintBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/path={path-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidPathpathUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of path",required=true) @PathParam("path-uuid") String pathUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidPathpathUuidGet(uuid,pathUuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.PathComputationService", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.PathComputationService to be added to list" ) TapiPathComputationPathComputationService tapiPathComputationPathComputationServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidPost(uuid,tapiPathComputationPathComputationServiceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.path.computation.PathComputationService", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.PathComputationService to be added or updated" ) TapiPathComputationPathComputationService tapiPathComputationPathComputationServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidPut(uuid,tapiPathComputationPathComputationServiceBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost(uuid,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete(uuid,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet(uuid,costName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePost(uuid,costName,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut(uuid,costName,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.path.computation.RoutingConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost(uuid,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete(uuid,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(uuid,trafficPropertyName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePost(uuid,trafficPropertyName,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut(uuid,trafficPropertyName,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.RoutingConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added to list" ) TapiPathComputationRoutingConstraint tapiPathComputationRoutingConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPost(uuid,tapiPathComputationRoutingConstraintBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.path.computation.RoutingConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added or updated" ) TapiPathComputationRoutingConstraint tapiPathComputationRoutingConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPut(uuid,tapiPathComputationRoutingConstraintBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list" ) TapiTopologyRiskCharacteristic tapiTopologyRiskCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost(uuid,tapiTopologyRiskCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete(uuid,riskCharacteristicName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(uuid,riskCharacteristicName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list" ) TapiTopologyRiskCharacteristic tapiTopologyRiskCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePost(uuid,riskCharacteristicName,tapiTopologyRiskCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.RiskCharacteristic", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added or updated" ) TapiTopologyRiskCharacteristic tapiTopologyRiskCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut(uuid,riskCharacteristicName,tapiTopologyRiskCharacteristicBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/avoid-topology={topology-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintAvoidTopologytopologyUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of avoid-topology",required=true) @PathParam("topology-uuid") String topologyUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintAvoidTopologytopologyUuidGet(uuid,topologyUuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.path.computation.TopologyConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/exclude-link={topology-uuid},{link-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LinkRef", response = TapiTopologyLinkRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintExcludeLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of exclude-link",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of exclude-link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintExcludeLinktopologyUuidlinkUuidGet(uuid,topologyUuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/exclude-node={topology-uuid},{node-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeRef", response = TapiTopologyNodeRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeRef", response = TapiTopologyNodeRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintExcludeNodetopologyUuidnodeUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of exclude-node",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of exclude-node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintExcludeNodetopologyUuidnodeUuidGet(uuid,topologyUuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/exclude-path={path-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintExcludePathpathUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of exclude-path",required=true) @PathParam("path-uuid") String pathUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintExcludePathpathUuidGet(uuid,pathUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.TopologyConstraint", response = TapiPathComputationTopologyConstraint.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.TopologyConstraint", response = TapiPathComputationTopologyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/include-link={topology-uuid},{link-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LinkRef", response = TapiTopologyLinkRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludeLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-link",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of include-link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludeLinktopologyUuidlinkUuidGet(uuid,topologyUuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/include-node={topology-uuid},{node-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeRef", response = TapiTopologyNodeRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeRef", response = TapiTopologyNodeRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludeNodetopologyUuidnodeUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-node",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of include-node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludeNodetopologyUuidnodeUuidGet(uuid,topologyUuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/include-path={path-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludePathpathUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-path",required=true) @PathParam("path-uuid") String pathUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludePathpathUuidGet(uuid,pathUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/include-topology={topology-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludeTopologytopologyUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of include-topology",required=true) @PathParam("topology-uuid") String topologyUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintIncludeTopologytopologyUuidGet(uuid,topologyUuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.TopologyConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added to list" ) TapiPathComputationTopologyConstraint tapiPathComputationTopologyConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPost(uuid,tapiPathComputationTopologyConstraintBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/path-comp-service={uuid}/topology-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.path.computation.TopologyConstraint", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added or updated" ) TapiPathComputationTopologyConstraint tapiPathComputationTopologyConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPut(uuid,tapiPathComputationTopologyConstraintBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.Path", response = TapiPathComputationPath.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.Path", response = TapiPathComputationPath.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathuuidGet(@ApiParam(value = "Id of path",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathuuidGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path={uuid}/link={topology-uuid},{link-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LinkRef", response = TapiTopologyLinkRef.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathuuidLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of path",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathuuidLinktopologyUuidlinkUuidGet(uuid,topologyUuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathuuidNamevalueNameGet(@ApiParam(value = "Id of path",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path={uuid}/routing-constraint/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet(uuid,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path={uuid}/routing-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathuuidRoutingConstraintGet(@ApiParam(value = "Id of path",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathuuidRoutingConstraintGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(uuid,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/path-computation-context/path={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(uuid,riskCharacteristicName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/path-computation-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.path.computation.PathComputationContext", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPathComputationContextPost(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added to list" ) TapiPathComputationPathComputationContext tapiPathComputationPathComputationContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPost(tapiPathComputationPathComputationContextBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/path-computation-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.path.computation.PathComputationContext", response = Void.class, tags={ "tapi-path-computation", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPathComputationContextPut(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added or updated" ) TapiPathComputationPathComputationContext tapiPathComputationPathComputationContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPathComputationContextPut(tapiPathComputationPathComputationContextBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.Context", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextPost(@ApiParam(value = "tapi.common.Context to be added to list" ) TapiCommonContext tapiCommonContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPost(tapiCommonContextBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.Context", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextPut(@ApiParam(value = "tapi.common.Context to be added or updated" ) TapiCommonContext tapiCommonContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextPut(tapiCommonContextBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.context.ServiceInterfacePoint", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextServiceInterfacePointPost(@ApiParam(value = "tapi.common.context.ServiceInterfacePoint to be added to list" ) TapiCommonContextServiceInterfacePoint tapiCommonContextServiceInterfacePointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointPost(tapiCommonContextServiceInterfacePointBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/available-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/available-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/available-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfileGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfileGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/available-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/available-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidAvailableCapacityBandwidthProfilePeakInformationRateGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/available-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidAvailableCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidAvailableCapacityGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/available-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidAvailableCapacityTotalSizeGet(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/service-interface-point={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.context.ServiceInterfacePoint", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.context.ServiceInterfacePoint", response = TapiCommonContextServiceInterfacePoint.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.context.ServiceInterfacePoint", response = TapiCommonContextServiceInterfacePoint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidGet(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/available-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumFrequencyConstraintGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/available-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/occupied-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumFrequencyConstraintGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/occupied-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/supportable-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumFrequencyConstraintGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/mc-pool/supportable-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added to list" ) TapiPhotonicMediaMediaChannelServiceInterfacePointSpec tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPost(uuid,tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/service-interface-point={uuid}/tapi-photonic-media:media-channel-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added or updated" ) TapiPhotonicMediaMediaChannelServiceInterfacePointSpec tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPut(uuid,tapiPhotonicMediaMediaChannelServiceInterfacePointSpecBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/service-interface-point={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidNamePost(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/service-interface-point={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidNamevalueNameDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidNamevalueNameGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/service-interface-point={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidNamevalueNamePost(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/service-interface-point={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidNamevalueNamePut(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.photonic.media.OtsiServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiServiceInterfacePointSpec", response = TapiPhotonicMediaOtsiServiceInterfacePointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiServiceInterfacePointSpec", response = TapiPhotonicMediaOtsiServiceInterfacePointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiCapabilityPac", response = TapiPhotonicMediaOtsiCapabilityPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiCapabilityPac", response = TapiPhotonicMediaOtsiCapabilityPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-application-identifier/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-lower-central-frequency/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyFrequencyConstraintGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-lower-central-frequency/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableLowerCentralFrequencyGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-upper-central-frequency/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyFrequencyConstraintGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-upper-central-frequency/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableUpperCentralFrequencyGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/total-power-warn-threshold/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.TotalPowerThresholdPac", response = TapiPhotonicMediaTotalPowerThresholdPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.TotalPowerThresholdPac", response = TapiPhotonicMediaTotalPowerThresholdPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.photonic.media.OtsiServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.photonic.media.OtsiServiceInterfacePointSpec to be added to list" ) TapiPhotonicMediaOtsiServiceInterfacePointSpec tapiPhotonicMediaOtsiServiceInterfacePointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPost(uuid,tapiPhotonicMediaOtsiServiceInterfacePointSpecBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/service-interface-point={uuid}/otsi-service-interface-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.photonic.media.OtsiServiceInterfacePointSpec", response = Void.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.photonic.media.OtsiServiceInterfacePointSpec to be added or updated" ) TapiPhotonicMediaOtsiServiceInterfacePointSpec tapiPhotonicMediaOtsiServiceInterfacePointSpecBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPut(uuid,tapiPhotonicMediaOtsiServiceInterfacePointSpecBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/service-interface-point={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.context.ServiceInterfacePoint", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.context.ServiceInterfacePoint to be added to list" ) TapiCommonContextServiceInterfacePoint tapiCommonContextServiceInterfacePointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidPost(uuid,tapiCommonContextServiceInterfacePointBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/service-interface-point={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.context.ServiceInterfacePoint", response = Void.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.context.ServiceInterfacePoint to be added or updated" ) TapiCommonContextServiceInterfacePoint tapiCommonContextServiceInterfacePointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidPut(uuid,tapiCommonContextServiceInterfacePointBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfileGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfileGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidTotalPotentialCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidTotalPotentialCapacityGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/service-interface-point={uuid}/total-potential-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet(uuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/topology-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.TopologyContext", response = Void.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextDelete(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextDelete(securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyContext", response = TapiTopologyTopologyContext.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyContext", response = TapiTopologyTopologyContext.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextGet(securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/nw-topology-service/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NetworkTopologyService", response = TapiTopologyNetworkTopologyService.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NetworkTopologyService", response = TapiTopologyNetworkTopologyService.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextNwTopologyServiceGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextNwTopologyServiceGet(securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/nw-topology-service/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextNwTopologyServiceNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextNwTopologyServiceNamevalueNameGet(valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/nw-topology-service/topology={topology-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextNwTopologyServiceTopologytopologyUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("topology-uuid") String topologyUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextNwTopologyServiceTopologytopologyUuidGet(topologyUuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/topology-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.TopologyContext", response = Void.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextTopologyContextPost(@ApiParam(value = "tapi.topology.TopologyContext to be added to list" ) TapiTopologyTopologyContext tapiTopologyContextTopologyContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextPost(tapiTopologyContextTopologyContextBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/topology-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.TopologyContext", response = Void.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextPut(@ApiParam(value = "tapi.topology.TopologyContext to be added or updated" ) TapiTopologyTopologyContext tapiTopologyContextTopologyContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextPut(tapiTopologyContextTopologyContextBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.Topology", response = TapiTopologyTopology.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.Topology", response = TapiTopologyTopology.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidGet(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfileGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet(uuid,linkUuid,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.Link", response = TapiTopologyLink.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.Link", response = TapiTopologyLink.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet(uuid,linkUuid,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidNamevalueNameGet(uuid,linkUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/node-edge-point={topology-uuid},{node-uuid},{node-edge-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@ApiParam(value = "Id of node-edge-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of node-edge-point",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-edge-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(uuid,linkUuid,topologyUuid,nodeUuid,nodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/resilience-type/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.ResilienceType", response = TapiTopologyResilienceType.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.ResilienceType", response = TapiTopologyResilienceType.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidResilienceTypeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidResilienceTypeGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/risk-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@ApiParam(value = "Id of risk-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet(uuid,linkUuid,riskCharacteristicName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfileGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet(uuid,linkUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/link={link-uuid}/validation-mechanism={validation-mechanism}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.ValidationMechanism", response = TapiTopologyValidationMechanism.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.ValidationMechanism", response = TapiTopologyValidationMechanism.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of link",required=true) @PathParam("link-uuid") String linkUuid
,@ApiParam(value = "Id of validation-mechanism",required=true) @PathParam("validation-mechanism") String validationMechanism
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet(uuid,linkUuid,validationMechanism,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{node-edge-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathParam("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid
,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(uuid,nodeUuid,topologyUuid,aggregatedNodeEdgePointNodeUuid,nodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfileGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet(uuid,nodeUuid,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/encap-topology/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidEncapTopologyGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidEncapTopologyGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.topology.Node", response = TapiTopologyTopologyNode.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.topology.Node", response = TapiTopologyTopologyNode.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet(uuid,nodeUuid,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNamevalueNameGet(uuid,nodeUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfileGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/composed-rule-group={topology-uuid},{composed-rule-group-node-uuid},{composed-rule-group-node-rule-group-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of composed-rule-group",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of composed-rule-group",required=true) @PathParam("composed-rule-group-node-uuid") String composedRuleGroupNodeUuid
,@ApiParam(value = "Id of composed-rule-group",required=true) @PathParam("composed-rule-group-node-rule-group-uuid") String composedRuleGroupNodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet(uuid,nodeUuid,nodeRuleGroupUuid,topologyUuid,composedRuleGroupNodeUuid,composedRuleGroupNodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet(uuid,nodeUuid,nodeRuleGroupUuid,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeRuleGroup", response = TapiTopologyNodeRuleGroup.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroup", response = TapiTopologyNodeRuleGroup.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/associated-node-rule-group={topology-uuid},{associated-node-rule-group-node-uuid},{associated-node-rule-group-node-rule-group-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathParam("associated-node-rule-group-node-uuid") String associatedNodeRuleGroupNodeUuid
,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathParam("associated-node-rule-group-node-rule-group-uuid") String associatedNodeRuleGroupNodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,topologyUuid,associatedNodeRuleGroupNodeUuid,associatedNodeRuleGroupNodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfileGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.InterRuleGroup", response = TapiTopologyInterRuleGroup.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.InterRuleGroup", response = TapiTopologyInterRuleGroup.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@ApiParam(value = "Id of risk-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,riskCharacteristicName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.Rule", response = TapiTopologyRule.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRule.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@ApiParam(value = "Id of rule",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@ApiParam(value = "Id of rule",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfileGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of inter-rule-group",required=true) @PathParam("inter-rule-group-uuid") String interRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,interRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(uuid,nodeUuid,nodeRuleGroupUuid,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet(uuid,nodeUuid,nodeRuleGroupUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/node-edge-point={topology-uuid},{node-edge-point-node-uuid},{node-edge-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of node-edge-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of node-edge-point",required=true) @PathParam("node-edge-point-node-uuid") String nodeEdgePointNodeUuid
,@ApiParam(value = "Id of node-edge-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet(uuid,nodeUuid,nodeRuleGroupUuid,topologyUuid,nodeEdgePointNodeUuid,nodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of risk-characteristic",required=true) @PathParam("risk-characteristic-name") String riskCharacteristicName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(uuid,nodeUuid,nodeRuleGroupUuid,riskCharacteristicName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.Rule", response = TapiTopologyRule.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRule.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of rule",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet(uuid,nodeUuid,nodeRuleGroupUuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@ApiParam(value = "Id of rule",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet(uuid,nodeUuid,nodeRuleGroupUuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfileGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of node-rule-group",required=true) @PathParam("node-rule-group-uuid") String nodeRuleGroupUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet(uuid,nodeUuid,nodeRuleGroupUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{node-edge-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathParam("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid
,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(uuid,nodeUuid,ownedNodeEdgePointUuid,topologyUuid,aggregatedNodeEdgePointNodeUuid,nodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfileGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/available-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidAvailableCapacityTotalSizeGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/aggregated-connection-end-point={topology-uuid},{aggregated-connection-end-point-node-uuid},{node-edge-point-uuid},{aggregated-connection-end-point-connection-end-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidAggregatedConnectionEndPointtopologyUuidaggregatedConnectionEndPointNodeUuidnodeEdgePointUuidaggregatedConnectionEndPointConnectionEndPointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathParam("aggregated-connection-end-point-node-uuid") String aggregatedConnectionEndPointNodeUuid
,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathParam("aggregated-connection-end-point-connection-end-point-uuid") String aggregatedConnectionEndPointConnectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidAggregatedConnectionEndPointtopologyUuidaggregatedConnectionEndPointNodeUuidnodeEdgePointUuidaggregatedConnectionEndPointConnectionEndPointUuidGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,topologyUuid,aggregatedConnectionEndPointNodeUuid,nodeEdgePointUuid,aggregatedConnectionEndPointConnectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/client-node-edge-point={topology-uuid},{client-node-edge-point-node-uuid},{node-edge-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidClientNodeEdgePointtopologyUuidclientNodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathParam("topology-uuid") String topologyUuid
,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathParam("client-node-edge-point-node-uuid") String clientNodeEdgePointNodeUuid
,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathParam("node-edge-point-uuid") String nodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidClientNodeEdgePointtopologyUuidclientNodeEdgePointNodeUuidnodeEdgePointUuidGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,topologyUuid,clientNodeEdgePointNodeUuid,nodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/filter-config/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.ControlFrameFilter", response = TapiEthControlFrameFilter.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.ControlFrameFilter", response = TapiEthControlFrameFilter.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpFilterConfigGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpFilterConfigGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthCtpPac", response = TapiEthEthCtpPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthCtpPac", response = TapiEthEthCtpPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/traffic-conditioning/cond-config-list/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.TrafficConditioningConfiguration", response = TapiEthTrafficConditioningConfiguration.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningConfiguration", response = TapiEthTrafficConditioningConfiguration.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficConditioningCondConfigListGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficConditioningCondConfigListGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/traffic-conditioning/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.TrafficConditioningPac", response = TapiEthTrafficConditioningPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningPac", response = TapiEthTrafficConditioningPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficConditioningGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficConditioningGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/traffic-conditioning/prio-config-list/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficConditioningPrioConfigListGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficConditioningPrioConfigListGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/traffic-shaping/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.TrafficShapingPac", response = TapiEthTrafficShapingPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.TrafficShapingPac", response = TapiEthTrafficShapingPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficShapingGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficShapingGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/traffic-shaping/prio-config-list/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficShapingPrioConfigListGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficShapingPrioConfigListGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/traffic-shaping/queue-config-list/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.QueueConfiguration", response = TapiEthQueueConfiguration.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.QueueConfiguration", response = TapiEthQueueConfiguration.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficShapingQueueConfigListGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpTrafficShapingQueueConfigListGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthTerminationPac", response = TapiEthEthTerminationPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthTerminationPac", response = TapiEthEthTerminationPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/priority-regenerate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.PriorityMapping", response = TapiEthPriorityMapping.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.PriorityMapping", response = TapiEthPriorityMapping.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermPriorityRegenerateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermPriorityRegenerateGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/ety-term/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EtyTerminationPac", response = TapiEthEtyTerminationPac.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EtyTerminationPac", response = TapiEthEtyTerminationPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.eth.EthConnectionEndPointSpec", response = TapiEthEthConnectionEndPointSpec.class, tags={ "tapi-eth", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.eth.EthConnectionEndPointSpec", response = TapiEthEthConnectionEndPointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.ceplist.ConnectionEndPoint", response = TapiConnectivityCeplistConnectionEndPoint.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.ceplist.ConnectionEndPoint", response = TapiConnectivityCeplistConnectionEndPoint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-assembly-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelAssemblySpec", response = TapiPhotonicMediaMediaChannelAssemblySpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelAssemblySpec", response = TapiPhotonicMediaMediaChannelAssemblySpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelAssemblySpecGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelAssemblySpecGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelConnectionEndPointSpec", response = TapiPhotonicMediaMediaChannelConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelConnectionEndPointSpec", response = TapiPhotonicMediaMediaChannelConnectionEndPointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelPropertiesPac", response = TapiPhotonicMediaMediaChannelPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPropertiesPac", response = TapiPhotonicMediaMediaChannelPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/measured-power-egress/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/measured-power-ingress/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/occupied-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/occupied-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.MepMipList", response = TapiOamMepMipList.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.MepMipList", response = TapiOamMepMipList.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/mep={meg-uuid},{mep-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.MepRef", response = TapiOamMepRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.MepRef", response = TapiOamMepRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMepmegUuidmepLocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("meg-uuid") String megUuid
,@ApiParam(value = "Id of mep",required=true) @PathParam("mep-local-id") String mepLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMepmegUuidmepLocalIdGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,megUuid,mepLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/mip={meg-uuid},{mip-local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.oam.MipRef", response = TapiOamMipRef.class, tags={ "tapi-oam", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.oam.MipRef", response = TapiOamMipRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMipmegUuidmipLocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@ApiParam(value = "Id of mip",required=true) @PathParam("meg-uuid") String megUuid
,@ApiParam(value = "Id of mip",required=true) @PathParam("mip-local-id") String mipLocalId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMipmegUuidmipLocalIdGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,megUuid,mipLocalId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidNamevalueNameGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/ots-connection-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsConnectionEndPointSpec", response = TapiPhotonicMediaOtsConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsConnectionEndPointSpec", response = TapiPhotonicMediaOtsConnectionEndPointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/ots-connection-end-point-spec/ots-media-channel/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelPropertiesPac", response = TapiPhotonicMediaMediaChannelPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPropertiesPac", response = TapiPhotonicMediaMediaChannelPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/ots-connection-end-point-spec/ots-media-channel/measured-power-egress/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerEgressGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/ots-connection-end-point-spec/ots-media-channel/measured-power-ingress/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelMeasuredPowerIngressGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/ots-connection-end-point-spec/ots-media-channel/occupied-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumFrequencyConstraintGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/ots-connection-end-point-spec/ots-media-channel/occupied-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsConnectionEndPointSpecOtsMediaChannelOccupiedSpectrumGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/fec-parameters/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FecPropertiesPac", response = TapiPhotonicMediaFecPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FecPropertiesPac", response = TapiPhotonicMediaFecPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecFecParametersGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecFecParametersGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiAssemblyConnectionEndPointSpec", response = TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiAssemblyConnectionEndPointSpec", response = TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/otsi-adapter/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiGserverAdaptationPac", response = TapiPhotonicMediaOtsiGserverAdaptationPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiGserverAdaptationPac", response = TapiPhotonicMediaOtsiGserverAdaptationPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiConnectionEndPointSpec", response = TapiPhotonicMediaOtsiConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiConnectionEndPointSpec", response = TapiPhotonicMediaOtsiConnectionEndPointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.OtsiTerminationPac", response = TapiPhotonicMediaOtsiTerminationPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.OtsiTerminationPac", response = TapiPhotonicMediaOtsiTerminationPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/laser-properties/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.LaserPropertiesPac", response = TapiPhotonicMediaLaserPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.LaserPropertiesPac", response = TapiPhotonicMediaLaserPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/received-power/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-application-identifier/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-central-frequency/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-central-frequency/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/transmited-power/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.PowerPropertiesPac", response = TapiPhotonicMediaPowerPropertiesPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/parent-node-edge-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidParentNodeEdgePointGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of connection-end-point",required=true) @PathParam("connection-end-point-uuid") String connectionEndPointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidParentNodeEdgePointGet(uuid,nodeUuid,ownedNodeEdgePointUuid,connectionEndPointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/cep-list/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.connectivity.context.topologycontext.topology.node.ownednodeedgepoint.CepList", response = TapiConnectivityContextTopologycontextTopologyNodeOwnednodeedgepointCepList.class, tags={ "tapi-connectivity", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.connectivity.context.topologycontext.topology.node.ownednodeedgepoint.CepList", response = TapiConnectivityContextTopologycontextTopologyNodeOwnednodeedgepointCepList.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidCepListGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.node.OwnedNodeEdgePoint", response = TapiTopologyNodeOwnedNodeEdgePoint.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.node.OwnedNodeEdgePoint", response = TapiTopologyNodeOwnedNodeEdgePoint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/mapped-service-interface-point={service-interface-point-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of mapped-service-interface-point",required=true) @PathParam("service-interface-point-uuid") String serviceInterfacePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet(uuid,nodeUuid,ownedNodeEdgePointUuid,serviceInterfacePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelNodeEdgePointSpec", response = TapiPhotonicMediaMediaChannelNodeEdgePointSpec.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelNodeEdgePointSpec", response = TapiPhotonicMediaMediaChannelNodeEdgePointSpec.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/available-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumFrequencyConstraintGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/available-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/occupied-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumFrequencyConstraintGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/occupied-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/supportable-spectrum/frequency-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumFrequencyConstraintGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/supportable-spectrum/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidNamevalueNameGet(uuid,nodeUuid,ownedNodeEdgePointUuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfileGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/owned-node-edge-point={owned-node-edge-point-uuid}/total-potential-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@ApiParam(value = "Id of owned-node-edge-point",required=true) @PathParam("owned-node-edge-point-uuid") String ownedNodeEdgePointUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidOwnedNodeEdgePointownedNodeEdgePointUuidTotalPotentialCapacityTotalSizeGet(uuid,nodeUuid,ownedNodeEdgePointUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfileCommittedBurstSizeGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfileCommittedInformationRateGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfileGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfileGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfilePeakBurstSizeGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityBandwidthProfilePeakInformationRateGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet(uuid,nodeUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of node",required=true) @PathParam("node-uuid") String nodeUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet(uuid,nodeUuid,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.virtual.network.VirtualNetworkContext", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextDelete(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextDelete(securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.virtual.network.VirtualNetworkContext", response = TapiVirtualNetworkVirtualNetworkContext.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkContext", response = TapiVirtualNetworkVirtualNetworkContext.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextGet(@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextGet(securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.virtual.network.VirtualNetworkContext", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextPost(@ApiParam(value = "tapi.virtual.network.VirtualNetworkContext to be added to list" ) TapiVirtualNetworkVirtualNetworkContext tapiVirtualNetworkVirtualNetworkContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextPost(tapiVirtualNetworkVirtualNetworkContextBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.virtual.network.VirtualNetworkContext", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextPut(@ApiParam(value = "tapi.virtual.network.VirtualNetworkContext to be added or updated" ) TapiVirtualNetworkVirtualNetworkContext tapiVirtualNetworkVirtualNetworkContextBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextPut(tapiVirtualNetworkVirtualNetworkContextBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.virtual.network.VirtualNetworkService", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServicePost(@ApiParam(value = "tapi.virtual.network.VirtualNetworkService to be added to list" ) TapiVirtualNetworkVirtualNetworkService tapiVirtualNetworkVirtualNetworkServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServicePost(tapiVirtualNetworkVirtualNetworkServiceBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.virtual.network.VirtualNetworkService", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidDelete(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.virtual.network.VirtualNetworkServiceEndPoint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkServiceEndPoint to be added to list" ) TapiVirtualNetworkVirtualNetworkServiceEndPoint tapiVirtualNetworkVirtualNetworkServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointPost(uuid,tapiVirtualNetworkVirtualNetworkServiceEndPointBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.virtual.network.VirtualNetworkServiceEndPoint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.virtual.network.VirtualNetworkServiceEndPoint", response = TapiVirtualNetworkVirtualNetworkServiceEndPoint.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkServiceEndPoint", response = TapiVirtualNetworkVirtualNetworkServiceEndPoint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamePost(uuid,localId,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameDelete(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePost(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePut(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.virtual.network.VirtualNetworkServiceEndPoint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkServiceEndPoint to be added to list" ) TapiVirtualNetworkVirtualNetworkServiceEndPoint tapiVirtualNetworkVirtualNetworkServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPost(uuid,localId,tapiVirtualNetworkVirtualNetworkServiceEndPointBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.virtual.network.VirtualNetworkServiceEndPoint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkServiceEndPoint to be added or updated" ) TapiVirtualNetworkVirtualNetworkServiceEndPoint tapiVirtualNetworkVirtualNetworkServiceEndPointBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPut(uuid,localId,tapiVirtualNetworkVirtualNetworkServiceEndPointBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/service-interface-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of end-point",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdServiceInterfacePointGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.virtual.network.VirtualNetworkService", response = TapiVirtualNetworkVirtualNetworkService.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkService", response = TapiVirtualNetworkVirtualNetworkService.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidNamePost(uuid,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameDelete(uuid,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameGet(uuid,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePost(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePut(uuid,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.virtual.network.VirtualNetworkService", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkService to be added to list" ) TapiVirtualNetworkVirtualNetworkService tapiVirtualNetworkVirtualNetworkServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidPost(uuid,tapiVirtualNetworkVirtualNetworkServiceBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.virtual.network.VirtualNetworkService", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkService to be added or updated" ) TapiVirtualNetworkVirtualNetworkService tapiVirtualNetworkVirtualNetworkServiceBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidPut(uuid,tapiVirtualNetworkVirtualNetworkServiceBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/state/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.AdminStatePac", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidStateDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidStateDelete(uuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/state/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.AdminStatePac", response = TapiCommonAdminStatePac.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.AdminStatePac", response = TapiCommonAdminStatePac.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidStateGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidStateGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/state/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.AdminStatePac", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidStatePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.AdminStatePac to be added to list" ) TapiCommonAdminStatePac tapiCommonAdminStatePacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidStatePost(uuid,tapiCommonAdminStatePacBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/state/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.AdminStatePac", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidStatePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.common.AdminStatePac to be added or updated" ) TapiCommonAdminStatePac tapiCommonAdminStatePacBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidStatePut(uuid,tapiCommonAdminStatePacBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/topology/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidTopologyGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidTopologyGet(uuid,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.virtual.network.VirtualNetworkConstraint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkConstraint to be added to list" ) TapiVirtualNetworkVirtualNetworkConstraint tapiVirtualNetworkVirtualNetworkConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintPost(uuid,tapiVirtualNetworkVirtualNetworkConstraintBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristicPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristicPost(uuid,localId,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameDelete(uuid,localId,costName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameGet(uuid,localId,costName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePost(uuid,localId,costName,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.CostCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of cost-characteristic",required=true) @PathParam("cost-name") String costName
,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated" ) TapiTopologyCostCharacteristic tapiTopologyCostCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePut(uuid,localId,costName,tapiTopologyCostCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.virtual.network.VirtualNetworkConstraint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/diversity-exclusion={virtual-nw-service-uuid}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.virtual.network.VirtualNwServiceRef", response = TapiVirtualNetworkVirtualNwServiceRef.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNwServiceRef", response = TapiVirtualNetworkVirtualNwServiceRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDiversityExclusionvirtualNwServiceUuidGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathParam("virtual-nw-service-uuid") String virtualNwServiceUuid
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDiversityExclusionvirtualNwServiceUuidGet(uuid,localId,virtualNwServiceUuid,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.virtual.network.VirtualNetworkConstraint", response = TapiVirtualNetworkVirtualNetworkConstraint.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkConstraint", response = TapiVirtualNetworkVirtualNetworkConstraint.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristicPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristicPost(uuid,localId,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameDelete(uuid,localId,trafficPropertyName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameGet(uuid,localId,trafficPropertyName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePost(uuid,localId,trafficPropertyName,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.topology.LatencyCharacteristic", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of latency-characteristic",required=true) @PathParam("traffic-property-name") String trafficPropertyName
,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated" ) TapiTopologyLatencyCharacteristic tapiTopologyLatencyCharacteristicBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePut(uuid,localId,trafficPropertyName,tapiTopologyLatencyCharacteristicBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamePost(uuid,localId,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameDelete(uuid,localId,valueName,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.NameAndValue", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameGet(uuid,localId,valueName,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added to list" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePost(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.NameAndValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "Id of name",required=true) @PathParam("value-name") String valueName
,@ApiParam(value = "tapi.common.NameAndValue to be added or updated" ) TapiCommonNameAndValue tapiCommonNameAndValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePut(uuid,localId,valueName,tapiCommonNameAndValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.virtual.network.VirtualNetworkConstraint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkConstraint to be added to list" ) TapiVirtualNetworkVirtualNetworkConstraint tapiVirtualNetworkVirtualNetworkConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPost(uuid,localId,tapiVirtualNetworkVirtualNetworkConstraintBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.virtual.network.VirtualNetworkConstraint", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.virtual.network.VirtualNetworkConstraint to be added or updated" ) TapiVirtualNetworkVirtualNetworkConstraint tapiVirtualNetworkVirtualNetworkConstraintBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPut(uuid,localId,tapiVirtualNetworkVirtualNetworkConstraintBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizeDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizeGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedBurstSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRateDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRateDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRateGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRateGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRatePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRatePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/committed-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRatePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileCommittedInformationRatePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.BandwidthProfile", response = TapiCommonBandwidthProfile.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfileGet(uuid,localId,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizeDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizeGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-burst-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakBurstSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRateDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRateDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRateGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRateGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRatePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRatePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/peak-information-rate/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRatePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePeakInformationRatePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.BandwidthProfile to be added to list" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePost(uuid,localId,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/bandwidth-profile/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.BandwidthProfile", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.BandwidthProfile to be added or updated" ) TapiCommonBandwidthProfile tapiCommonBandwidthProfileBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityBandwidthProfilePut(uuid,localId,tapiCommonBandwidthProfileBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.Capacity", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.Capacity", response = TapiCommonCapacity.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.Capacity", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.Capacity to be added to list" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPost(uuid,localId,tapiCommonCapacityBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.Capacity", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.Capacity to be added or updated" ) TapiCommonCapacity tapiCommonCapacityBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPut(uuid,localId,tapiCommonCapacityBodyParam,securityContext);
    }
    @DELETE
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "removes tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object deleted", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeDelete(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.CapacityValue", response = TapiCommonCapacityValue.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeGet(uuid,localId,securityContext);
    }
    @POST
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 409, message = "Object already exists", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added to list" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePost(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @PUT
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "creates or updates tapi.common.CapacityValue", response = Void.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 201, message = "Object created", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 204, message = "Object modified", response = Void.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@ApiParam(value = "tapi.common.CapacityValue to be added or updated" ) TapiCommonCapacityValue tapiCommonCapacityValueBodyParam
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePut(uuid,localId,tapiCommonCapacityValueBodyParam,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/sink-service-end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSinkServiceEndPointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSinkServiceEndPointGet(uuid,localId,securityContext);
    }
    @GET
    @Path("/tapi-common:context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/src-service-end-point/")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @io.swagger.annotations.ApiOperation(value = "", notes = "returns tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @io.swagger.annotations.ApiResponses(value = { 
        @io.swagger.annotations.ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        
        @io.swagger.annotations.ApiResponse(code = 400, message = "Internal error", response = Void.class) })
    public Response dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSrcServiceEndPointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathParam("uuid") String uuid
,@ApiParam(value = "Id of vnw-constraint",required=true) @PathParam("local-id") String localId
,@Context SecurityContext securityContext)
    throws NotFoundException {
        return delegate.dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSrcServiceEndPointGet(uuid,localId,securityContext);
    }
}
