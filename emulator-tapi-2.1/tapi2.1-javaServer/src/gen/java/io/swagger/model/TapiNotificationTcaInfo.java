/*
 * tapi-common,tapi-dsr,tapi-path-computation,tapi-eth,tapi-virtual-network,tapi-topology,tapi-notification,tapi-oam,tapi-photonic-media,tapi-connectivity API
 * tapi-common,tapi-dsr,tapi-path-computation,tapi-eth,tapi-virtual-network,tapi-topology,tapi-notification,tapi-oam,tapi-photonic-media,tapi-connectivity API generated from yang definitions
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.TapiNotificationPerceivedTcaSeverity;
import io.swagger.model.TapiNotificationThresholdCrossingType;
import javax.validation.constraints.*;

/**
 * TapiNotificationTcaInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-11-14T14:58:12.974+01:00")
public class TapiNotificationTcaInfo   {
  @JsonProperty("threshold-crossing")
  private TapiNotificationThresholdCrossingType thresholdCrossing = null;

  @JsonProperty("threshold-parameter")
  private String thresholdParameter = null;

  @JsonProperty("is-transient")
  private Boolean isTransient = false;

  @JsonProperty("threshold-value")
  private Integer thresholdValue = null;

  @JsonProperty("perceived-severity")
  private TapiNotificationPerceivedTcaSeverity perceivedSeverity = null;

  @JsonProperty("suspect-interval-flag")
  private Boolean suspectIntervalFlag = false;

  @JsonProperty("measurement-interval")
  private String measurementInterval = null;

  public TapiNotificationTcaInfo thresholdCrossing(TapiNotificationThresholdCrossingType thresholdCrossing) {
    this.thresholdCrossing = thresholdCrossing;
    return this;
  }

  /**
   * none
   * @return thresholdCrossing
   **/
  @JsonProperty("threshold-crossing")
  @ApiModelProperty(value = "none")
  public TapiNotificationThresholdCrossingType getThresholdCrossing() {
    return thresholdCrossing;
  }

  public void setThresholdCrossing(TapiNotificationThresholdCrossingType thresholdCrossing) {
    this.thresholdCrossing = thresholdCrossing;
  }

  public TapiNotificationTcaInfo thresholdParameter(String thresholdParameter) {
    this.thresholdParameter = thresholdParameter;
    return this;
  }

  /**
   * none
   * @return thresholdParameter
   **/
  @JsonProperty("threshold-parameter")
  @ApiModelProperty(value = "none")
  public String getThresholdParameter() {
    return thresholdParameter;
  }

  public void setThresholdParameter(String thresholdParameter) {
    this.thresholdParameter = thresholdParameter;
  }

  public TapiNotificationTcaInfo isTransient(Boolean isTransient) {
    this.isTransient = isTransient;
    return this;
  }

  /**
   * none
   * @return isTransient
   **/
  @JsonProperty("is-transient")
  @ApiModelProperty(value = "none")
  public Boolean isIsTransient() {
    return isTransient;
  }

  public void setIsTransient(Boolean isTransient) {
    this.isTransient = isTransient;
  }

  public TapiNotificationTcaInfo thresholdValue(Integer thresholdValue) {
    this.thresholdValue = thresholdValue;
    return this;
  }

  /**
   * none
   * @return thresholdValue
   **/
  @JsonProperty("threshold-value")
  @ApiModelProperty(value = "none")
  public Integer getThresholdValue() {
    return thresholdValue;
  }

  public void setThresholdValue(Integer thresholdValue) {
    this.thresholdValue = thresholdValue;
  }

  public TapiNotificationTcaInfo perceivedSeverity(TapiNotificationPerceivedTcaSeverity perceivedSeverity) {
    this.perceivedSeverity = perceivedSeverity;
    return this;
  }

  /**
   * none
   * @return perceivedSeverity
   **/
  @JsonProperty("perceived-severity")
  @ApiModelProperty(value = "none")
  public TapiNotificationPerceivedTcaSeverity getPerceivedSeverity() {
    return perceivedSeverity;
  }

  public void setPerceivedSeverity(TapiNotificationPerceivedTcaSeverity perceivedSeverity) {
    this.perceivedSeverity = perceivedSeverity;
  }

  public TapiNotificationTcaInfo suspectIntervalFlag(Boolean suspectIntervalFlag) {
    this.suspectIntervalFlag = suspectIntervalFlag;
    return this;
  }

  /**
   * none
   * @return suspectIntervalFlag
   **/
  @JsonProperty("suspect-interval-flag")
  @ApiModelProperty(value = "none")
  public Boolean isSuspectIntervalFlag() {
    return suspectIntervalFlag;
  }

  public void setSuspectIntervalFlag(Boolean suspectIntervalFlag) {
    this.suspectIntervalFlag = suspectIntervalFlag;
  }

  public TapiNotificationTcaInfo measurementInterval(String measurementInterval) {
    this.measurementInterval = measurementInterval;
    return this;
  }

  /**
   * none
   * @return measurementInterval
   **/
  @JsonProperty("measurement-interval")
  @ApiModelProperty(value = "none")
  public String getMeasurementInterval() {
    return measurementInterval;
  }

  public void setMeasurementInterval(String measurementInterval) {
    this.measurementInterval = measurementInterval;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TapiNotificationTcaInfo tapiNotificationTcaInfo = (TapiNotificationTcaInfo) o;
    return Objects.equals(this.thresholdCrossing, tapiNotificationTcaInfo.thresholdCrossing) &&
        Objects.equals(this.thresholdParameter, tapiNotificationTcaInfo.thresholdParameter) &&
        Objects.equals(this.isTransient, tapiNotificationTcaInfo.isTransient) &&
        Objects.equals(this.thresholdValue, tapiNotificationTcaInfo.thresholdValue) &&
        Objects.equals(this.perceivedSeverity, tapiNotificationTcaInfo.perceivedSeverity) &&
        Objects.equals(this.suspectIntervalFlag, tapiNotificationTcaInfo.suspectIntervalFlag) &&
        Objects.equals(this.measurementInterval, tapiNotificationTcaInfo.measurementInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(thresholdCrossing, thresholdParameter, isTransient, thresholdValue, perceivedSeverity, suspectIntervalFlag, measurementInterval);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TapiNotificationTcaInfo {\n");
    
    sb.append("    thresholdCrossing: ").append(toIndentedString(thresholdCrossing)).append("\n");
    sb.append("    thresholdParameter: ").append(toIndentedString(thresholdParameter)).append("\n");
    sb.append("    isTransient: ").append(toIndentedString(isTransient)).append("\n");
    sb.append("    thresholdValue: ").append(toIndentedString(thresholdValue)).append("\n");
    sb.append("    perceivedSeverity: ").append(toIndentedString(perceivedSeverity)).append("\n");
    sb.append("    suspectIntervalFlag: ").append(toIndentedString(suspectIntervalFlag)).append("\n");
    sb.append("    measurementInterval: ").append(toIndentedString(measurementInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

