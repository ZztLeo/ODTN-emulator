/*
 * tapi-common,tapi-dsr,tapi-path-computation,tapi-eth,tapi-virtual-network,tapi-topology,tapi-notification,tapi-oam,tapi-photonic-media,tapi-connectivity API
 * tapi-common,tapi-dsr,tapi-path-computation,tapi-eth,tapi-virtual-network,tapi-topology,tapi-notification,tapi-oam,tapi-photonic-media,tapi-connectivity API generated from yang definitions
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.TapiCommonGlobalClass;
import io.swagger.model.TapiCommonNameAndValue;
import io.swagger.model.TapiNotificationNotification;
import io.swagger.model.TapiNotificationNotificationChannel;
import io.swagger.model.TapiNotificationNotificationType;
import io.swagger.model.TapiNotificationObjectType;
import io.swagger.model.TapiNotificationSubscriptionFilter;
import io.swagger.model.TapiNotificationSubscriptionState;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * TapiNotificationNotificationSubscriptionService
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-11-14T14:58:12.974+01:00")
public class TapiNotificationNotificationSubscriptionService   {
  @JsonProperty("name")
  private List<TapiCommonNameAndValue> name = null;

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("notification")
  private List<TapiNotificationNotification> notification = null;

  @JsonProperty("notification-channel")
  private TapiNotificationNotificationChannel notificationChannel = null;

  @JsonProperty("subscription-state")
  private TapiNotificationSubscriptionState subscriptionState = null;

  @JsonProperty("supported-object-types")
  private List<TapiNotificationObjectType> supportedObjectTypes = null;

  @JsonProperty("supported-notification-types")
  private List<TapiNotificationNotificationType> supportedNotificationTypes = null;

  @JsonProperty("subscription-filter")
  private TapiNotificationSubscriptionFilter subscriptionFilter = null;

  public TapiNotificationNotificationSubscriptionService name(List<TapiCommonNameAndValue> name) {
    this.name = name;
    return this;
  }

  public TapiNotificationNotificationSubscriptionService addNameItem(TapiCommonNameAndValue nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<TapiCommonNameAndValue>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<TapiCommonNameAndValue> getName() {
    return name;
  }

  public void setName(List<TapiCommonNameAndValue> name) {
    this.name = name;
  }

  public TapiNotificationNotificationSubscriptionService uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.                      UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.                      Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-&#39; + &#39;[0-9a-fA-F]{4}-[0-9a-fA-F]{12}                       Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
   * @return uuid
   **/
  @JsonProperty("uuid")
  @ApiModelProperty(value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.                      UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.                      Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}                       Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public TapiNotificationNotificationSubscriptionService notification(List<TapiNotificationNotification> notification) {
    this.notification = notification;
    return this;
  }

  public TapiNotificationNotificationSubscriptionService addNotificationItem(TapiNotificationNotification notificationItem) {
    if (this.notification == null) {
      this.notification = new ArrayList<TapiNotificationNotification>();
    }
    this.notification.add(notificationItem);
    return this;
  }

  /**
   * none
   * @return notification
   **/
  @JsonProperty("notification")
  @ApiModelProperty(value = "none")
  public List<TapiNotificationNotification> getNotification() {
    return notification;
  }

  public void setNotification(List<TapiNotificationNotification> notification) {
    this.notification = notification;
  }

  public TapiNotificationNotificationSubscriptionService notificationChannel(TapiNotificationNotificationChannel notificationChannel) {
    this.notificationChannel = notificationChannel;
    return this;
  }

  /**
   * none
   * @return notificationChannel
   **/
  @JsonProperty("notification-channel")
  @ApiModelProperty(value = "none")
  public TapiNotificationNotificationChannel getNotificationChannel() {
    return notificationChannel;
  }

  public void setNotificationChannel(TapiNotificationNotificationChannel notificationChannel) {
    this.notificationChannel = notificationChannel;
  }

  public TapiNotificationNotificationSubscriptionService subscriptionState(TapiNotificationSubscriptionState subscriptionState) {
    this.subscriptionState = subscriptionState;
    return this;
  }

  /**
   * none
   * @return subscriptionState
   **/
  @JsonProperty("subscription-state")
  @ApiModelProperty(value = "none")
  public TapiNotificationSubscriptionState getSubscriptionState() {
    return subscriptionState;
  }

  public void setSubscriptionState(TapiNotificationSubscriptionState subscriptionState) {
    this.subscriptionState = subscriptionState;
  }

  public TapiNotificationNotificationSubscriptionService supportedObjectTypes(List<TapiNotificationObjectType> supportedObjectTypes) {
    this.supportedObjectTypes = supportedObjectTypes;
    return this;
  }

  public TapiNotificationNotificationSubscriptionService addSupportedObjectTypesItem(TapiNotificationObjectType supportedObjectTypesItem) {
    if (this.supportedObjectTypes == null) {
      this.supportedObjectTypes = new ArrayList<TapiNotificationObjectType>();
    }
    this.supportedObjectTypes.add(supportedObjectTypesItem);
    return this;
  }

  /**
   * none
   * @return supportedObjectTypes
   **/
  @JsonProperty("supported-object-types")
  @ApiModelProperty(value = "none")
  public List<TapiNotificationObjectType> getSupportedObjectTypes() {
    return supportedObjectTypes;
  }

  public void setSupportedObjectTypes(List<TapiNotificationObjectType> supportedObjectTypes) {
    this.supportedObjectTypes = supportedObjectTypes;
  }

  public TapiNotificationNotificationSubscriptionService supportedNotificationTypes(List<TapiNotificationNotificationType> supportedNotificationTypes) {
    this.supportedNotificationTypes = supportedNotificationTypes;
    return this;
  }

  public TapiNotificationNotificationSubscriptionService addSupportedNotificationTypesItem(TapiNotificationNotificationType supportedNotificationTypesItem) {
    if (this.supportedNotificationTypes == null) {
      this.supportedNotificationTypes = new ArrayList<TapiNotificationNotificationType>();
    }
    this.supportedNotificationTypes.add(supportedNotificationTypesItem);
    return this;
  }

  /**
   * none
   * @return supportedNotificationTypes
   **/
  @JsonProperty("supported-notification-types")
  @ApiModelProperty(value = "none")
  public List<TapiNotificationNotificationType> getSupportedNotificationTypes() {
    return supportedNotificationTypes;
  }

  public void setSupportedNotificationTypes(List<TapiNotificationNotificationType> supportedNotificationTypes) {
    this.supportedNotificationTypes = supportedNotificationTypes;
  }

  public TapiNotificationNotificationSubscriptionService subscriptionFilter(TapiNotificationSubscriptionFilter subscriptionFilter) {
    this.subscriptionFilter = subscriptionFilter;
    return this;
  }

  /**
   * none
   * @return subscriptionFilter
   **/
  @JsonProperty("subscription-filter")
  @ApiModelProperty(value = "none")
  public TapiNotificationSubscriptionFilter getSubscriptionFilter() {
    return subscriptionFilter;
  }

  public void setSubscriptionFilter(TapiNotificationSubscriptionFilter subscriptionFilter) {
    this.subscriptionFilter = subscriptionFilter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TapiNotificationNotificationSubscriptionService tapiNotificationNotificationSubscriptionService = (TapiNotificationNotificationSubscriptionService) o;
    return Objects.equals(this.name, tapiNotificationNotificationSubscriptionService.name) &&
        Objects.equals(this.uuid, tapiNotificationNotificationSubscriptionService.uuid) &&
        Objects.equals(this.notification, tapiNotificationNotificationSubscriptionService.notification) &&
        Objects.equals(this.notificationChannel, tapiNotificationNotificationSubscriptionService.notificationChannel) &&
        Objects.equals(this.subscriptionState, tapiNotificationNotificationSubscriptionService.subscriptionState) &&
        Objects.equals(this.supportedObjectTypes, tapiNotificationNotificationSubscriptionService.supportedObjectTypes) &&
        Objects.equals(this.supportedNotificationTypes, tapiNotificationNotificationSubscriptionService.supportedNotificationTypes) &&
        Objects.equals(this.subscriptionFilter, tapiNotificationNotificationSubscriptionService.subscriptionFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, uuid, notification, notificationChannel, subscriptionState, supportedObjectTypes, supportedNotificationTypes, subscriptionFilter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TapiNotificationNotificationSubscriptionService {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    notificationChannel: ").append(toIndentedString(notificationChannel)).append("\n");
    sb.append("    subscriptionState: ").append(toIndentedString(subscriptionState)).append("\n");
    sb.append("    supportedObjectTypes: ").append(toIndentedString(supportedObjectTypes)).append("\n");
    sb.append("    supportedNotificationTypes: ").append(toIndentedString(supportedNotificationTypes)).append("\n");
    sb.append("    subscriptionFilter: ").append(toIndentedString(subscriptionFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

