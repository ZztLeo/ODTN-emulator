/*
 * tapi-common,tapi-dsr,tapi-path-computation,tapi-eth,tapi-virtual-network,tapi-topology,tapi-notification,tapi-oam,tapi-photonic-media,tapi-connectivity API
 * tapi-common,tapi-dsr,tapi-path-computation,tapi-eth,tapi-virtual-network,tapi-topology,tapi-notification,tapi-oam,tapi-photonic-media,tapi-connectivity API generated from yang definitions
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.TapiEthStatisticalLmPerformanceParameters;
import javax.validation.constraints.*;

/**
 * TapiEthEthLmThresholdData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-11-14T14:58:12.974+01:00")
public class TapiEthEthLmThresholdData   {
  @JsonProperty("far-end-lm-clear-threshold")
  private TapiEthStatisticalLmPerformanceParameters farEndLmClearThreshold = null;

  @JsonProperty("far-end-lm-cross-threshold")
  private TapiEthStatisticalLmPerformanceParameters farEndLmCrossThreshold = null;

  @JsonProperty("near-end-lm-clear-threshold")
  private TapiEthStatisticalLmPerformanceParameters nearEndLmClearThreshold = null;

  @JsonProperty("bi-dir-lm-uas-cross-threshold")
  private Integer biDirLmUasCrossThreshold = null;

  @JsonProperty("bi-dir-lm-uas-clear-threshold")
  private Integer biDirLmUasClearThreshold = null;

  @JsonProperty("near-end-lm-cross-threshold")
  private TapiEthStatisticalLmPerformanceParameters nearEndLmCrossThreshold = null;

  public TapiEthEthLmThresholdData farEndLmClearThreshold(TapiEthStatisticalLmPerformanceParameters farEndLmClearThreshold) {
    this.farEndLmClearThreshold = farEndLmClearThreshold;
    return this;
  }

  /**
   * This attribute is only valid for frame loss ratio parameters and counter type parameters working in the &#39;standing condition method&#39; (see G.7710, section 10.1.7.2: Threshold reporting) and contains the far end clear threshold values of the loss measurements.
   * @return farEndLmClearThreshold
   **/
  @JsonProperty("far-end-lm-clear-threshold")
  @ApiModelProperty(value = "This attribute is only valid for frame loss ratio parameters and counter type parameters working in the 'standing condition method' (see G.7710, section 10.1.7.2: Threshold reporting) and contains the far end clear threshold values of the loss measurements.")
  public TapiEthStatisticalLmPerformanceParameters getFarEndLmClearThreshold() {
    return farEndLmClearThreshold;
  }

  public void setFarEndLmClearThreshold(TapiEthStatisticalLmPerformanceParameters farEndLmClearThreshold) {
    this.farEndLmClearThreshold = farEndLmClearThreshold;
  }

  public TapiEthEthLmThresholdData farEndLmCrossThreshold(TapiEthStatisticalLmPerformanceParameters farEndLmCrossThreshold) {
    this.farEndLmCrossThreshold = farEndLmCrossThreshold;
    return this;
  }

  /**
   * This attribute contains the far end cross threshold values of the loss measurements.
   * @return farEndLmCrossThreshold
   **/
  @JsonProperty("far-end-lm-cross-threshold")
  @ApiModelProperty(value = "This attribute contains the far end cross threshold values of the loss measurements.")
  public TapiEthStatisticalLmPerformanceParameters getFarEndLmCrossThreshold() {
    return farEndLmCrossThreshold;
  }

  public void setFarEndLmCrossThreshold(TapiEthStatisticalLmPerformanceParameters farEndLmCrossThreshold) {
    this.farEndLmCrossThreshold = farEndLmCrossThreshold;
  }

  public TapiEthEthLmThresholdData nearEndLmClearThreshold(TapiEthStatisticalLmPerformanceParameters nearEndLmClearThreshold) {
    this.nearEndLmClearThreshold = nearEndLmClearThreshold;
    return this;
  }

  /**
   * This attribute is only valid for frame loss ratio parameters and counter type parameters working in the &#39;standing condition method&#39; (see G.7710, section 10.1.7.2: Threshold reporting) and contains the near end clear threshold values of the loss measurements.
   * @return nearEndLmClearThreshold
   **/
  @JsonProperty("near-end-lm-clear-threshold")
  @ApiModelProperty(value = "This attribute is only valid for frame loss ratio parameters and counter type parameters working in the 'standing condition method' (see G.7710, section 10.1.7.2: Threshold reporting) and contains the near end clear threshold values of the loss measurements.")
  public TapiEthStatisticalLmPerformanceParameters getNearEndLmClearThreshold() {
    return nearEndLmClearThreshold;
  }

  public void setNearEndLmClearThreshold(TapiEthStatisticalLmPerformanceParameters nearEndLmClearThreshold) {
    this.nearEndLmClearThreshold = nearEndLmClearThreshold;
  }

  public TapiEthEthLmThresholdData biDirLmUasCrossThreshold(Integer biDirLmUasCrossThreshold) {
    this.biDirLmUasCrossThreshold = biDirLmUasCrossThreshold;
    return this;
  }

  /**
   * This attribute contains the bidirectional cross threshold value of the UAS loss measurement.
   * @return biDirLmUasCrossThreshold
   **/
  @JsonProperty("bi-dir-lm-uas-cross-threshold")
  @ApiModelProperty(value = "This attribute contains the bidirectional cross threshold value of the UAS loss measurement.")
  public Integer getBiDirLmUasCrossThreshold() {
    return biDirLmUasCrossThreshold;
  }

  public void setBiDirLmUasCrossThreshold(Integer biDirLmUasCrossThreshold) {
    this.biDirLmUasCrossThreshold = biDirLmUasCrossThreshold;
  }

  public TapiEthEthLmThresholdData biDirLmUasClearThreshold(Integer biDirLmUasClearThreshold) {
    this.biDirLmUasClearThreshold = biDirLmUasClearThreshold;
    return this;
  }

  /**
   * This attribute is only valid for the UAS parameter working in the &#39;standing condition method&#39; (see G.7710, section 10.1.7.2: Threshold reporting) and contains the bidirectional clear threshold value of the UAS loss measurement.
   * @return biDirLmUasClearThreshold
   **/
  @JsonProperty("bi-dir-lm-uas-clear-threshold")
  @ApiModelProperty(value = "This attribute is only valid for the UAS parameter working in the 'standing condition method' (see G.7710, section 10.1.7.2: Threshold reporting) and contains the bidirectional clear threshold value of the UAS loss measurement.")
  public Integer getBiDirLmUasClearThreshold() {
    return biDirLmUasClearThreshold;
  }

  public void setBiDirLmUasClearThreshold(Integer biDirLmUasClearThreshold) {
    this.biDirLmUasClearThreshold = biDirLmUasClearThreshold;
  }

  public TapiEthEthLmThresholdData nearEndLmCrossThreshold(TapiEthStatisticalLmPerformanceParameters nearEndLmCrossThreshold) {
    this.nearEndLmCrossThreshold = nearEndLmCrossThreshold;
    return this;
  }

  /**
   * This attribute contains the near end cross threshold values of the loss measurements.
   * @return nearEndLmCrossThreshold
   **/
  @JsonProperty("near-end-lm-cross-threshold")
  @ApiModelProperty(value = "This attribute contains the near end cross threshold values of the loss measurements.")
  public TapiEthStatisticalLmPerformanceParameters getNearEndLmCrossThreshold() {
    return nearEndLmCrossThreshold;
  }

  public void setNearEndLmCrossThreshold(TapiEthStatisticalLmPerformanceParameters nearEndLmCrossThreshold) {
    this.nearEndLmCrossThreshold = nearEndLmCrossThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TapiEthEthLmThresholdData tapiEthEthLmThresholdData = (TapiEthEthLmThresholdData) o;
    return Objects.equals(this.farEndLmClearThreshold, tapiEthEthLmThresholdData.farEndLmClearThreshold) &&
        Objects.equals(this.farEndLmCrossThreshold, tapiEthEthLmThresholdData.farEndLmCrossThreshold) &&
        Objects.equals(this.nearEndLmClearThreshold, tapiEthEthLmThresholdData.nearEndLmClearThreshold) &&
        Objects.equals(this.biDirLmUasCrossThreshold, tapiEthEthLmThresholdData.biDirLmUasCrossThreshold) &&
        Objects.equals(this.biDirLmUasClearThreshold, tapiEthEthLmThresholdData.biDirLmUasClearThreshold) &&
        Objects.equals(this.nearEndLmCrossThreshold, tapiEthEthLmThresholdData.nearEndLmCrossThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(farEndLmClearThreshold, farEndLmCrossThreshold, nearEndLmClearThreshold, biDirLmUasCrossThreshold, biDirLmUasClearThreshold, nearEndLmCrossThreshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TapiEthEthLmThresholdData {\n");
    
    sb.append("    farEndLmClearThreshold: ").append(toIndentedString(farEndLmClearThreshold)).append("\n");
    sb.append("    farEndLmCrossThreshold: ").append(toIndentedString(farEndLmCrossThreshold)).append("\n");
    sb.append("    nearEndLmClearThreshold: ").append(toIndentedString(nearEndLmClearThreshold)).append("\n");
    sb.append("    biDirLmUasCrossThreshold: ").append(toIndentedString(biDirLmUasCrossThreshold)).append("\n");
    sb.append("    biDirLmUasClearThreshold: ").append(toIndentedString(biDirLmUasClearThreshold)).append("\n");
    sb.append("    nearEndLmCrossThreshold: ").append(toIndentedString(nearEndLmCrossThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

